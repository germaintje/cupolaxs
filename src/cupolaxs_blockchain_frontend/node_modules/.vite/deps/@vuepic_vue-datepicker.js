import {
  add,
  addDays,
  addHours,
  addMonths,
  addYears,
  differenceInCalendarDays,
  eachDayOfInterval,
  eachQuarterOfInterval,
  endOfQuarter,
  endOfWeek,
  endOfYear,
  format,
  getDay,
  getHours,
  getISOWeek,
  getMinutes,
  getMonth,
  getQuarter,
  getSeconds,
  getWeek,
  getYear,
  isAfter,
  isBefore,
  isDate,
  isEqual,
  isSameQuarter,
  isValid,
  parse,
  set,
  setHours,
  setMilliseconds,
  setMinutes,
  setMonth,
  setSeconds,
  setYear,
  startOfQuarter,
  startOfWeek,
  startOfYear,
  sub,
  subMonths,
  subYears
} from "./chunk-CJILTB7G.js";
import {
  Fragment,
  Teleport,
  Transition,
  computed,
  createBaseVNode,
  createBlock,
  createCommentVNode,
  createElementBlock,
  createSlots,
  createTextVNode,
  createVNode,
  defineComponent,
  getCurrentScope,
  guardReactiveProps,
  h,
  isRef,
  mergeProps,
  nextTick,
  normalizeClass,
  normalizeProps,
  normalizeStyle,
  onBeforeUpdate,
  onMounted,
  onScopeDispose,
  onUnmounted,
  openBlock,
  reactive,
  ref,
  render,
  renderList,
  renderSlot,
  resolveDynamicComponent,
  toDisplayString,
  toRef,
  unref,
  useSlots,
  vShow,
  watch,
  withCtx,
  withDirectives,
  withKeys,
  withModifiers
} from "./chunk-T6UHK3NM.js";
import "./chunk-ZC22LKFR.js";

// ../../node_modules/@vuepic/vue-datepicker/dist/vue-datepicker.js
function It() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M29.333 8c0-2.208-1.792-4-4-4h-18.667c-2.208 0-4 1.792-4 4v18.667c0 2.208 1.792 4 4 4h18.667c2.208 0 4-1.792 4-4v-18.667zM26.667 8v18.667c0 0.736-0.597 1.333-1.333 1.333 0 0-18.667 0-18.667 0-0.736 0-1.333-0.597-1.333-1.333 0 0 0-18.667 0-18.667 0-0.736 0.597-1.333 1.333-1.333 0 0 18.667 0 18.667 0 0.736 0 1.333 0.597 1.333 1.333z"
      }),
      createBaseVNode("path", {
        d: "M20 2.667v5.333c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-5.333c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333z"
      }),
      createBaseVNode("path", {
        d: "M9.333 2.667v5.333c0 0.736 0.597 1.333 1.333 1.333s1.333-0.597 1.333-1.333v-5.333c0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333z"
      }),
      createBaseVNode("path", {
        d: "M4 14.667h24c0.736 0 1.333-0.597 1.333-1.333s-0.597-1.333-1.333-1.333h-24c-0.736 0-1.333 0.597-1.333 1.333s0.597 1.333 1.333 1.333z"
      })
    ]
  );
}
It.compatConfig = {
  MODE: 3
};
function fn() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M23.057 7.057l-16 16c-0.52 0.52-0.52 1.365 0 1.885s1.365 0.52 1.885 0l16-16c0.52-0.52 0.52-1.365 0-1.885s-1.365-0.52-1.885 0z"
      }),
      createBaseVNode("path", {
        d: "M7.057 8.943l16 16c0.52 0.52 1.365 0.52 1.885 0s0.52-1.365 0-1.885l-16-16c-0.52-0.52-1.365-0.52-1.885 0s-0.52 1.365 0 1.885z"
      })
    ]
  );
}
fn.compatConfig = {
  MODE: 3
};
function Oa() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M20.943 23.057l-7.057-7.057c0 0 7.057-7.057 7.057-7.057 0.52-0.52 0.52-1.365 0-1.885s-1.365-0.52-1.885 0l-8 8c-0.521 0.521-0.521 1.365 0 1.885l8 8c0.52 0.52 1.365 0.52 1.885 0s0.52-1.365 0-1.885z"
      })
    ]
  );
}
Oa.compatConfig = {
  MODE: 3
};
function Ba() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M12.943 24.943l8-8c0.521-0.521 0.521-1.365 0-1.885l-8-8c-0.52-0.52-1.365-0.52-1.885 0s-0.52 1.365 0 1.885l7.057 7.057c0 0-7.057 7.057-7.057 7.057-0.52 0.52-0.52 1.365 0 1.885s1.365 0.52 1.885 0z"
      })
    ]
  );
}
Ba.compatConfig = {
  MODE: 3
};
function Ya() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M16 1.333c-8.095 0-14.667 6.572-14.667 14.667s6.572 14.667 14.667 14.667c8.095 0 14.667-6.572 14.667-14.667s-6.572-14.667-14.667-14.667zM16 4c6.623 0 12 5.377 12 12s-5.377 12-12 12c-6.623 0-12-5.377-12-12s5.377-12 12-12z"
      }),
      createBaseVNode("path", {
        d: "M14.667 8v8c0 0.505 0.285 0.967 0.737 1.193l5.333 2.667c0.658 0.329 1.46 0.062 1.789-0.596s0.062-1.46-0.596-1.789l-4.596-2.298c0 0 0-7.176 0-7.176 0-0.736-0.597-1.333-1.333-1.333s-1.333 0.597-1.333 1.333z"
      })
    ]
  );
}
Ya.compatConfig = {
  MODE: 3
};
function Ia() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M24.943 19.057l-8-8c-0.521-0.521-1.365-0.521-1.885 0l-8 8c-0.52 0.52-0.52 1.365 0 1.885s1.365 0.52 1.885 0l7.057-7.057c0 0 7.057 7.057 7.057 7.057 0.52 0.52 1.365 0.52 1.885 0s0.52-1.365 0-1.885z"
      })
    ]
  );
}
Ia.compatConfig = {
  MODE: 3
};
function Na() {
  return openBlock(), createElementBlock(
    "svg",
    {
      xmlns: "http://www.w3.org/2000/svg",
      viewBox: "0 0 32 32",
      fill: "currentColor",
      "aria-hidden": "true",
      class: "dp__icon"
    },
    [
      createBaseVNode("path", {
        d: "M7.057 12.943l8 8c0.521 0.521 1.365 0.521 1.885 0l8-8c0.52-0.52 0.52-1.365 0-1.885s-1.365-0.52-1.885 0l-7.057 7.057c0 0-7.057-7.057-7.057-7.057-0.52-0.52-1.365-0.52-1.885 0s-0.52 1.365 0 1.885z"
      })
    ]
  );
}
Na.compatConfig = {
  MODE: 3
};
function qa(e) {
  return (t) => new Intl.DateTimeFormat(e, { weekday: "short", timeZone: "UTC" }).format(/* @__PURE__ */ new Date(`2017-01-0${t}T00:00:00+00:00`)).slice(0, 2);
}
function Zn(e) {
  return (t) => format(/* @__PURE__ */ new Date(`2017-01-0${t}T00:00:00+00:00`), "EEEEEE", { locale: e });
}
var xn = (e, t, l) => {
  const n = [1, 2, 3, 4, 5, 6, 7];
  let a;
  if (e !== null)
    try {
      a = n.map(Zn(e));
    } catch {
      a = n.map(qa(t));
    }
  else
    a = n.map(qa(t));
  const f = a.slice(0, l), r = a.slice(l + 1, a.length);
  return [a[l]].concat(...r).concat(...f);
};
var Ea = (e, t, l) => {
  const n = [];
  for (let a = +e[0]; a <= +e[1]; a++)
    n.push({ value: +a, text: gn(a, t) });
  return l ? n.reverse() : n;
};
var vn = (e, t, l) => {
  const n = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map((f) => {
    const r = f < 10 ? `0${f}` : f;
    return /* @__PURE__ */ new Date(`2017-${r}-01T00:00:00+00:00`);
  });
  if (e !== null)
    try {
      const f = l === "long" ? "MMMM" : "MMM";
      return n.map((r, i) => {
        const P = format(r, f, { locale: e });
        return {
          text: P.charAt(0).toUpperCase() + P.substring(1),
          value: i
        };
      });
    } catch {
    }
  const a = new Intl.DateTimeFormat(t, { month: l, timeZone: "UTC" });
  return n.map((f, r) => {
    const i = a.format(f);
    return {
      text: i.charAt(0).toUpperCase() + i.substring(1),
      value: r
    };
  });
};
var el = (e) => [12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11][e];
var Ee = (e) => {
  const t = unref(e);
  return t != null && t.$el ? t == null ? void 0 : t.$el : t;
};
var tl = (e) => ({ type: "dot", ...e ?? {} });
var mn = (e) => Array.isArray(e) ? !!e[0] && !!e[1] : false;
var Fa = {
  prop: (e) => `"${e}" prop must be enabled!`,
  dateArr: (e) => `You need to use array as "model-value" binding in order to support "${e}"`
};
var Ye = (e) => e;
var Xa = (e) => e === 0 ? e : !e || isNaN(+e) ? null : +e;
var Ja = (e) => e === null;
var pn = (e) => {
  if (e)
    return [...e.querySelectorAll("input, button, select, textarea, a[href]")][0];
};
var al = (e) => {
  const t = [], l = (n) => n.filter((a) => a);
  for (let n = 0; n < e.length; n += 3) {
    const a = [e[n], e[n + 1], e[n + 2]];
    t.push(l(a));
  }
  return t;
};
var Ut = (e, t, l) => {
  const n = l != null, a = t != null;
  if (!n && !a)
    return false;
  const f = +l, r = +t;
  return n && a ? +e > f || +e < r : n ? +e > f : a ? +e < r : false;
};
var Ot = (e, t) => al(e).map((l) => l.map((n) => {
  const { active: a, disabled: f, isBetween: r, highlighted: i } = t(n);
  return {
    ...n,
    active: a,
    disabled: f,
    className: {
      dp__overlay_cell_active: a,
      dp__overlay_cell: !a,
      dp__overlay_cell_disabled: f,
      dp__overlay_cell_pad: true,
      dp__overlay_cell_active_disabled: f && a,
      dp__cell_in_between: r,
      "dp--highlighted": i
    }
  };
}));
var mt = (e, t, l = false) => {
  e && t.allowStopPropagation && (l && e.stopImmediatePropagation(), e.stopPropagation());
};
var nl = () => [
  "a[href]",
  "area[href]",
  "input:not([disabled]):not([type='hidden'])",
  "select:not([disabled])",
  "textarea:not([disabled])",
  "button:not([disabled])",
  "[tabindex]:not([tabindex='-1'])",
  "[data-datepicker-instance]"
].join(", ");
function ll(e, t) {
  let l = [...document.querySelectorAll(nl())];
  l = l.filter((a) => !e.contains(a) || a.hasAttribute("data-datepicker-instance"));
  const n = l.indexOf(e);
  if (n >= 0 && (t ? n - 1 >= 0 : n + 1 <= l.length))
    return l[n + (t ? -1 : 1)];
}
var rl = (e, t) => e == null ? void 0 : e.querySelector(`[data-dp-element="${t}"]`);
var gn = (e, t) => new Intl.NumberFormat(t, { useGrouping: false, style: "decimal" }).format(e);
var La = (e) => format(e, "dd-MM-yyyy");
var ga = (e) => Array.isArray(e);
var aa = (e, t) => t.get(La(e));
var ol = (e, t) => e ? t ? t instanceof Map ? !!aa(e, t) : t(H(e)) : false : true;
var Za = (e, t, l, n, a, f) => {
  const r = parse(e, t.slice(0, e.length), /* @__PURE__ */ new Date(), { locale: f });
  return isValid(r) && isDate(r) ? n || a ? r : set(r, {
    hours: +l.hours,
    minutes: +(l == null ? void 0 : l.minutes),
    seconds: +(l == null ? void 0 : l.seconds),
    milliseconds: 0
  }) : null;
};
var sl = (e, t, l, n, a, f) => {
  const r = Array.isArray(l) ? l[0] : l;
  if (typeof t == "string")
    return Za(e, t, r, n, a, f);
  if (Array.isArray(t)) {
    let i = null;
    for (const P of t)
      if (i = Za(e, P, r, n, a, f), i)
        break;
    return i;
  }
  return typeof t == "function" ? t(e) : null;
};
var H = (e) => e ? new Date(e) : /* @__PURE__ */ new Date();
var ul = (e, t, l) => {
  if (t) {
    const a = (e.getMonth() + 1).toString().padStart(2, "0"), f = e.getDate().toString().padStart(2, "0"), r = e.getHours().toString().padStart(2, "0"), i = e.getMinutes().toString().padStart(2, "0"), P = l ? e.getSeconds().toString().padStart(2, "0") : "00";
    return `${e.getFullYear()}-${a}-${f}T${r}:${i}:${P}.000Z`;
  }
  const n = Date.UTC(
    e.getUTCFullYear(),
    e.getUTCMonth(),
    e.getUTCDate(),
    e.getUTCHours(),
    e.getUTCMinutes(),
    e.getUTCSeconds()
  );
  return new Date(n).toISOString();
};
var Ke = (e) => {
  let t = H(JSON.parse(JSON.stringify(e)));
  return t = setHours(t, 0), t = setMinutes(t, 0), t = setSeconds(t, 0), t = setMilliseconds(t, 0), t;
};
var pt = (e, t, l, n) => {
  let a = e ? H(e) : H();
  return (t || t === 0) && (a = setHours(a, +t)), (l || l === 0) && (a = setMinutes(a, +l)), (n || n === 0) && (a = setSeconds(a, +n)), setMilliseconds(a, 0);
};
var _e = (e, t) => !e || !t ? false : isBefore(Ke(e), Ke(t));
var ke = (e, t) => !e || !t ? false : isEqual(Ke(e), Ke(t));
var Be = (e, t) => !e || !t ? false : isAfter(Ke(e), Ke(t));
var ra = (e, t, l) => e != null && e[0] && (e != null && e[1]) ? Be(l, e[0]) && _e(l, e[1]) : e != null && e[0] && t ? Be(l, e[0]) && _e(l, t) || _e(l, e[0]) && Be(l, t) : false;
var xe = (e) => {
  const t = set(new Date(e), { date: 1 });
  return Ke(t);
};
var ya = (e, t, l) => t && (l || l === 0) ? Object.fromEntries(
  ["hours", "minutes", "seconds"].map((n) => n === t ? [n, l] : [n, isNaN(+e[n]) ? void 0 : +e[n]])
) : {
  hours: isNaN(+e.hours) ? void 0 : +e.hours,
  minutes: isNaN(+e.minutes) ? void 0 : +e.minutes,
  seconds: isNaN(+e.seconds) ? void 0 : +e.seconds
};
var $t = (e) => ({
  hours: getHours(e),
  minutes: getMinutes(e),
  seconds: getSeconds(e)
});
var yn = (e, t) => {
  if (t) {
    const l = getYear(H(t));
    if (l > e)
      return 12;
    if (l === e)
      return getMonth(H(t));
  }
};
var hn = (e, t) => {
  if (t) {
    const l = getYear(H(t));
    return l < e ? -1 : l === e ? getMonth(H(t)) : void 0;
  }
};
var Bt = (e) => {
  if (e)
    return getYear(H(e));
};
var bn = (e, t) => {
  const l = Be(e, t) ? t : e, n = Be(t, e) ? t : e;
  return eachDayOfInterval({ start: l, end: n });
};
var il = (e) => {
  const t = addMonths(e, 1);
  return { month: getMonth(t), year: getYear(t) };
};
var st = (e, t) => {
  const l = startOfWeek(e, { weekStartsOn: +t }), n = endOfWeek(e, { weekStartsOn: +t });
  return [l, n];
};
var kn = (e, t) => {
  const l = {
    hours: getHours(H()),
    minutes: getMinutes(H()),
    seconds: t ? getSeconds(H()) : 0
  };
  return Object.assign(l, e);
};
var vt = (e, t, l) => [set(H(e), { date: 1 }), set(H(), { month: t, year: l, date: 1 })];
var ut = (e, t, l) => {
  let n = e ? H(e) : H();
  return (t || t === 0) && (n = setMonth(n, t)), l && (n = setYear(n, l)), n;
};
var wn = (e, t, l, n, a) => {
  if (!n || a && !t || !a && !l)
    return false;
  const f = a ? addMonths(e, 1) : subMonths(e, 1), r = [getMonth(f), getYear(f)];
  return a ? !cl(...r, t) : !dl(...r, l);
};
var dl = (e, t, l) => _e(...vt(l, e, t)) || ke(...vt(l, e, t));
var cl = (e, t, l) => Be(...vt(l, e, t)) || ke(...vt(l, e, t));
var Mn = (e, t, l, n, a, f, r) => {
  if (typeof t == "function" && !r)
    return t(e);
  const i = l ? { locale: l } : void 0;
  return Array.isArray(e) ? `${format(e[0], f, i)}${a && !e[1] ? "" : n}${e[1] ? format(e[1], f, i) : ""}` : format(e, f, i);
};
var Rt = (e) => {
  if (e)
    return null;
  throw new Error(Fa.prop("partial-range"));
};
var Jt = (e, t) => {
  if (t)
    return e();
  throw new Error(Fa.prop("range"));
};
var Ra = (e) => Array.isArray(e) ? isValid(e[0]) && (e[1] ? isValid(e[1]) : true) : e ? isValid(e) : false;
var fl = (e, t) => set(t ?? H(), {
  hours: +e.hours || 0,
  minutes: +e.minutes || 0,
  seconds: +e.seconds || 0
});
var ha = (e, t, l, n) => {
  if (!e)
    return true;
  if (n) {
    const a = l === "max" ? isBefore(e, t) : isAfter(e, t), f = { seconds: 0, milliseconds: 0 };
    return a || isEqual(set(e, f), set(t, f));
  }
  return l === "max" ? e.getTime() <= t.getTime() : e.getTime() >= t.getTime();
};
var ba = (e, t, l) => e ? fl(e, t) : H(l ?? t);
var xa = (e, t, l, n, a) => {
  if (Array.isArray(n)) {
    const r = ba(e, n[0], t), i = ba(e, n[1], t);
    return ha(n[0], r, l, !!t) && ha(n[1], i, l, !!t) && a;
  }
  const f = ba(e, n, t);
  return ha(n, f, l, !!t) && a;
};
var ka = (e) => set(H(), $t(e));
var vl = (e, t) => e instanceof Map ? Array.from(e.values()).filter((l) => getYear(H(l)) === t).map((l) => getMonth(l)) : [];
var Dn = (e, t, l) => typeof e == "function" ? e({ month: t, year: l }) : !!e.months.find((n) => n.month === t && n.year === l);
var Va = (e, t) => typeof e == "function" ? e(t) : e.years.includes(t);
var Ft = reactive({
  menuFocused: false,
  shiftKeyInMenu: false
});
var $n = () => {
  const e = (n) => {
    Ft.menuFocused = n;
  }, t = (n) => {
    Ft.shiftKeyInMenu !== n && (Ft.shiftKeyInMenu = n);
  };
  return {
    control: computed(() => ({ shiftKeyInMenu: Ft.shiftKeyInMenu, menuFocused: Ft.menuFocused })),
    setMenuFocused: e,
    setShiftKey: t
  };
};
var Re = reactive({
  monthYear: [],
  calendar: [],
  time: [],
  actionRow: [],
  selectionGrid: [],
  timePicker: {
    0: [],
    1: []
  },
  monthPicker: []
});
var wa = ref(null);
var Zt = ref(false);
var Ma = ref(false);
var Da = ref(false);
var $a = ref(false);
var Le = ref(0);
var Oe = ref(0);
var yt = () => {
  const e = computed(() => Zt.value ? [...Re.selectionGrid, Re.actionRow].filter((C) => C.length) : Ma.value ? [
    ...Re.timePicker[0],
    ...Re.timePicker[1],
    $a.value ? [] : [wa.value],
    Re.actionRow
  ].filter((C) => C.length) : Da.value ? [...Re.monthPicker, Re.actionRow] : [Re.monthYear, ...Re.calendar, Re.time, Re.actionRow].filter((C) => C.length)), t = (C) => {
    Le.value = C ? Le.value + 1 : Le.value - 1;
    let E = null;
    e.value[Oe.value] && (E = e.value[Oe.value][Le.value]), !E && e.value[Oe.value + (C ? 1 : -1)] ? (Oe.value = Oe.value + (C ? 1 : -1), Le.value = C ? 0 : e.value[Oe.value].length - 1) : E || (Le.value = C ? Le.value - 1 : Le.value + 1);
  }, l = (C) => {
    if (Oe.value === 0 && !C || Oe.value === e.value.length && C)
      return;
    Oe.value = C ? Oe.value + 1 : Oe.value - 1, e.value[Oe.value] ? e.value[Oe.value] && !e.value[Oe.value][Le.value] && Le.value !== 0 && (Le.value = e.value[Oe.value].length - 1) : Oe.value = C ? Oe.value - 1 : Oe.value + 1;
  }, n = (C) => {
    let E = null;
    e.value[Oe.value] && (E = e.value[Oe.value][Le.value]), E ? E.focus({ preventScroll: !Zt.value }) : Le.value = C ? Le.value - 1 : Le.value + 1;
  }, a = () => {
    t(true), n(true);
  }, f = () => {
    t(false), n(false);
  }, r = () => {
    l(false), n(true);
  }, i = () => {
    l(true), n(true);
  }, P = (C, E) => {
    Re[E] = C;
  }, T = (C, E) => {
    Re[E] = C;
  }, h2 = () => {
    Le.value = 0, Oe.value = 0;
  };
  return {
    buildMatrix: P,
    buildMultiLevelMatrix: T,
    setTimePickerBackRef: (C) => {
      wa.value = C;
    },
    setSelectionGrid: (C) => {
      Zt.value = C, h2(), C || (Re.selectionGrid = []);
    },
    setTimePicker: (C, E = false) => {
      Ma.value = C, $a.value = E, h2(), C || (Re.timePicker[0] = [], Re.timePicker[1] = []);
    },
    setTimePickerElements: (C, E = 0) => {
      Re.timePicker[E] = C;
    },
    arrowRight: a,
    arrowLeft: f,
    arrowUp: r,
    arrowDown: i,
    clearArrowNav: () => {
      Re.monthYear = [], Re.calendar = [], Re.time = [], Re.actionRow = [], Re.selectionGrid = [], Re.timePicker[0] = [], Re.timePicker[1] = [], Zt.value = false, Ma.value = false, $a.value = false, Da.value = false, h2(), wa.value = null;
    },
    setMonthPicker: (C) => {
      Da.value = C, h2();
    },
    refSets: Re
    // exposed for testing
  };
};
var it = (e, t) => t ? new Date(e.toLocaleString("en-US", { timeZone: t })) : new Date(e);
var An = (e, t) => {
  const l = Pa(e, t);
  return l || H();
};
var ml = (e, t) => t.dateInTz ? it(new Date(e), t.dateInTz) : H(e);
var Pa = (e, t) => {
  if (!e)
    return null;
  if (!t)
    return H(e);
  const l = H(e);
  return t.exactMatch ? ml(e, t) : it(l, t.timezone);
};
var pl = (e) => {
  if (!e)
    return 0;
  const t = /* @__PURE__ */ new Date(), l = new Date(t.toLocaleString("en-US", { timeZone: "UTC" })), n = new Date(t.toLocaleString("en-US", { timeZone: e })), a = n.getTimezoneOffset() / 60;
  return (+l - +n) / (1e3 * 60 * 60) - a;
};
var en = (e) => ({
  menuAppearTop: "dp-menu-appear-top",
  menuAppearBottom: "dp-menu-appear-bottom",
  open: "dp-slide-down",
  close: "dp-slide-up",
  next: "calendar-next",
  previous: "calendar-prev",
  vNext: "dp-slide-up",
  vPrevious: "dp-slide-down",
  ...e ?? {}
});
var gl = (e) => ({
  toggleOverlay: "Toggle overlay",
  menu: "Datepicker menu",
  input: "Datepicker input",
  calendarWrap: "Calendar wrapper",
  calendarDays: "Calendar days",
  openTimePicker: "Open time picker",
  closeTimePicker: "Close time Picker",
  incrementValue: (t) => `Increment ${t}`,
  decrementValue: (t) => `Decrement ${t}`,
  openTpOverlay: (t) => `Open ${t} overlay`,
  amPmButton: "Switch AM/PM mode",
  openYearsOverlay: "Open years overlay",
  openMonthsOverlay: "Open months overlay",
  nextMonth: "Next month",
  prevMonth: "Previous month",
  nextYear: "Next year",
  prevYear: "Previous year",
  day: void 0,
  weekDay: void 0,
  ...e ?? {}
});
var tn = (e) => e ? typeof e == "boolean" ? e ? 2 : 0 : +e >= 2 ? +e : 2 : 0;
var yl = (e) => {
  const t = typeof e == "object" && e, l = {
    static: true,
    solo: false
  };
  if (!e)
    return { ...l, count: tn(false) };
  const n = t ? e : {}, a = t ? n.count ?? true : e, f = tn(a);
  return Object.assign(l, n, { count: f });
};
var hl = (e, t, l) => e || (typeof l == "string" ? l : t);
var bl = (e) => typeof e == "boolean" ? e ? en({}) : false : en(e);
var kl = (e) => {
  const t = {
    enterSubmit: true,
    tabSubmit: true,
    openMenu: true,
    selectOnFocus: false,
    rangeSeparator: " - "
  };
  return typeof e == "object" ? { ...t, ...e ?? {}, enabled: true } : { ...t, enabled: e };
};
var wl = (e) => ({
  months: [],
  years: [],
  times: { hours: [], minutes: [], seconds: [] },
  ...e ?? {}
});
var Ml = (e) => ({
  showSelect: true,
  showCancel: true,
  showNow: false,
  showPreview: true,
  ...e ?? {}
});
var Dl = (e) => {
  const t = { input: false };
  return typeof e == "object" ? { ...t, ...e ?? {}, enabled: true } : {
    enabled: e,
    ...t
  };
};
var $l = (e) => ({ ...{
  allowStopPropagation: true,
  closeOnScroll: false,
  modeHeight: 255,
  allowPreventDefault: false,
  closeOnClearValue: true,
  closeOnAutoApply: true,
  noSwipe: false,
  keepActionRow: false,
  onClickOutside: void 0,
  tabOutClosesMenu: true,
  arrowLeft: void 0
}, ...e ?? {} });
var Al = (e) => {
  const t = {
    dates: Array.isArray(e) ? e.map((l) => H(l)) : [],
    years: [],
    months: [],
    quarters: [],
    weeks: [],
    weekdays: [],
    options: { highlightDisabled: false }
  };
  return typeof e == "function" ? e : { ...t, ...e ?? {} };
};
var Tl = (e) => typeof e == "object" ? {
  type: (e == null ? void 0 : e.type) ?? "local",
  hideOnOffsetDates: (e == null ? void 0 : e.hideOnOffsetDates) ?? false
} : {
  type: e,
  hideOnOffsetDates: false
};
var Sl = (e, t) => {
  const l = {
    noDisabledRange: false,
    showLastInRange: true,
    minMaxRawRange: false,
    partialRange: true,
    disableTimeRangeValidation: false,
    maxRange: void 0,
    minRange: void 0,
    autoRange: void 0,
    fixedStart: false,
    fixedEnd: false
  };
  return typeof e == "object" ? { enabled: true, ...l, ...e } : {
    enabled: e,
    noDisabledRange: t.noDisabledRange,
    showLastInRange: t.showLastInRange,
    minMaxRawRange: t.minMaxRawRange,
    partialRange: t.partialRange,
    disableTimeRangeValidation: t.disableTimeRangeValidation,
    maxRange: t.maxRange,
    minRange: t.minRange,
    autoRange: t.autoRange,
    fixedStart: t.fixedStart,
    fixedEnd: t.fixedEnd
  };
};
var Rl = (e, t) => e ? typeof e == "string" ? { timezone: e, exactMatch: false, dateInTz: void 0, emitTimezone: t, convertModel: true } : {
  timezone: e.timezone,
  exactMatch: e.exactMatch ?? false,
  dateInTz: e.dateInTz ?? void 0,
  emitTimezone: t ?? e.emitTimezone,
  convertModel: e.convertModel ?? true
} : { timezone: void 0, exactMatch: false, emitTimezone: t };
var Aa = (e, t) => new Map(
  e.map((l) => {
    const n = An(l, t);
    return [La(n), n];
  })
);
var Pl = (e, t) => e.length ? new Map(
  e.map((l) => {
    const n = An(l.date, t);
    return [La(n), l];
  })
) : null;
var Cl = (e, t, l, n, a, f, r) => ({
  minDate: Pa(e, r),
  maxDate: Pa(t, r),
  disabledDates: ga(l) ? Aa(l, r) : l,
  allowedDates: ga(n) ? Aa(n, r) : null,
  highlight: typeof a == "object" && ga(a == null ? void 0 : a.dates) ? Aa(a.dates, r) : a,
  markers: Pl(f, r)
});
var _l = (e, t) => typeof e == "boolean" ? { enabled: e, dragSelect: true, limit: +t } : {
  enabled: !!e,
  limit: e.limit ? +e.limit : null,
  dragSelect: e.dragSelect ?? true
};
var Ce = (e) => {
  const t = () => {
    const B = e.enableSeconds ? ":ss" : "";
    return e.is24 ? `HH:mm${B}` : `hh:mm${B} aa`;
  }, l = () => {
    var B;
    return e.format ? e.format : e.monthPicker ? "MM/yyyy" : e.timePicker ? t() : e.weekPicker ? `${((B = F.value) == null ? void 0 : B.type) === "iso" ? "RR" : "ww"}-yyyy` : e.yearPicker ? "yyyy" : e.quarterPicker ? "QQQ/yyyy" : e.enableTimePicker ? `MM/dd/yyyy, ${t()}` : "MM/dd/yyyy";
  }, n = (B) => kn(B, e.enableSeconds), a = () => R.value.enabled ? e.startTime && Array.isArray(e.startTime) ? [n(e.startTime[0]), n(e.startTime[1])] : null : e.startTime && !Array.isArray(e.startTime) ? n(e.startTime) : null, f = computed(() => yl(e.multiCalendars)), r = computed(() => a()), i = computed(() => gl(e.ariaLabels)), P = computed(() => wl(e.filters)), T = computed(() => bl(e.transitions)), h2 = computed(() => Ml(e.actionRow)), S = computed(
    () => hl(e.previewFormat, e.format, l())
  ), M = computed(() => kl(e.textInput)), Y = computed(() => Dl(e.inline)), I = computed(() => $l(e.config)), $ = computed(() => Al(e.highlight)), F = computed(() => Tl(e.weekNumbers)), C = computed(() => Rl(e.timezone, e.emitTimezone)), E = computed(() => _l(e.multiDates, e.multiDatesLimit)), N = computed(
    () => Cl(
      e.minDate,
      e.maxDate,
      e.disabledDates,
      e.allowedDates,
      $.value,
      e.markers,
      C.value
    )
  ), R = computed(
    () => Sl(e.range, {
      minMaxRawRange: false,
      maxRange: e.maxRange,
      minRange: e.minRange,
      noDisabledRange: e.noDisabledRange,
      showLastInRange: e.showLastInRange,
      partialRange: e.partialRange,
      disableTimeRangeValidation: e.disableTimeRangeValidation,
      autoRange: e.autoRange,
      fixedStart: e.fixedStart,
      fixedEnd: e.fixedEnd
    })
  );
  return {
    defaultedTransitions: T,
    defaultedMultiCalendars: f,
    defaultedStartTime: r,
    defaultedAriaLabels: i,
    defaultedFilters: P,
    defaultedActionRow: h2,
    defaultedPreviewFormat: S,
    defaultedTextInput: M,
    defaultedInline: Y,
    defaultedConfig: I,
    defaultedHighlight: $,
    defaultedWeekNumbers: F,
    defaultedRange: R,
    propDates: N,
    defaultedTz: C,
    defaultedMultiDates: E,
    getDefaultPattern: l,
    getDefaultStartTime: a
  };
};
var Ze = ((e) => (e.month = "month", e.year = "year", e))(Ze || {});
var wt = ((e) => (e.top = "top", e.bottom = "bottom", e))(wt || {});
var At = ((e) => (e.header = "header", e.calendar = "calendar", e.timePicker = "timePicker", e))(At || {});
var nt = ((e) => (e.month = "month", e.year = "year", e.calendar = "calendar", e.time = "time", e.minutes = "minutes", e.hours = "hours", e.seconds = "seconds", e))(nt || {});
var Ol = ["timestamp", "date", "iso"];
var Bl = (e, t, l) => {
  const n = ref(), { defaultedTextInput: a, defaultedRange: f, defaultedTz: r, defaultedMultiDates: i, getDefaultPattern: P } = Ce(t), T = ref(""), h2 = toRef(t, "format"), S = toRef(t, "formatLocale");
  watch(
    n,
    () => {
      typeof t.onInternalModelChange == "function" && e("internal-model-change", n.value, m(true));
    },
    { deep: true }
  ), watch(h2, () => {
    g();
  });
  const M = (o) => r.value.timezone && r.value.convertModel ? it(o, r.value.timezone) : o, Y = (o) => {
    if (r.value.timezone && r.value.convertModel) {
      const s = pl(r.value.timezone);
      return addHours(o, s);
    }
    return o;
  }, I = (o, s, v = false) => Mn(
    o,
    t.format,
    t.formatLocale,
    a.value.rangeSeparator,
    t.modelAuto,
    s ?? P(),
    v
  ), $ = (o) => o ? t.modelType ? O(o) : {
    hours: getHours(o),
    minutes: getMinutes(o),
    seconds: t.enableSeconds ? getSeconds(o) : 0
  } : null, F = (o) => t.modelType ? O(o) : { month: getMonth(o), year: getYear(o) }, C = (o) => Array.isArray(o) ? i.value.enabled ? o.map((s) => E(s, setYear(H(), s))) : Jt(
    () => [
      setYear(H(), o[0]),
      o[1] ? setYear(H(), o[1]) : Rt(f.value.partialRange)
    ],
    f.value.enabled
  ) : setYear(H(), +o), E = (o, s) => (typeof o == "string" || typeof o == "number") && t.modelType ? q(o) : s, N = (o) => Array.isArray(o) ? [
    E(
      o[0],
      pt(null, +o[0].hours, +o[0].minutes, o[0].seconds)
    ),
    E(
      o[1],
      pt(null, +o[1].hours, +o[1].minutes, o[1].seconds)
    )
  ] : E(o, pt(null, o.hours, o.minutes, o.seconds)), R = (o) => {
    const s = set(H(), { date: 1 });
    return Array.isArray(o) ? i.value.enabled ? o.map((v) => E(v, ut(s, +v.month, +v.year))) : Jt(
      () => [
        E(o[0], ut(s, +o[0].month, +o[0].year)),
        E(
          o[1],
          o[1] ? ut(s, +o[1].month, +o[1].year) : Rt(f.value.partialRange)
        )
      ],
      f.value.enabled
    ) : E(o, ut(s, +o.month, +o.year));
  }, B = (o) => {
    if (Array.isArray(o))
      return o.map((s) => q(s));
    throw new Error(Fa.dateArr("multi-dates"));
  }, V = (o) => {
    if (Array.isArray(o) && f.value.enabled) {
      const s = o[0], v = o[1];
      return [
        H(Array.isArray(s) ? s[0] : null),
        H(Array.isArray(v) ? v[0] : null)
      ];
    }
    return H(o[0]);
  }, J = (o) => t.modelAuto ? Array.isArray(o) ? [q(o[0]), q(o[1])] : t.autoApply ? [q(o)] : [q(o), null] : Array.isArray(o) ? Jt(
    () => o[1] ? [
      q(o[0]),
      o[1] ? q(o[1]) : Rt(f.value.partialRange)
    ] : [q(o[0])],
    f.value.enabled
  ) : q(o), A = () => {
    Array.isArray(n.value) && f.value.enabled && n.value.length === 1 && n.value.push(Rt(f.value.partialRange));
  }, ue = () => {
    const o = n.value;
    return [
      O(o[0]),
      o[1] ? O(o[1]) : Rt(f.value.partialRange)
    ];
  }, le = () => n.value[1] ? ue() : O(Ye(n.value[0])), ae = () => (n.value || []).map((o) => O(o)), _ = (o = false) => (o || A(), t.modelAuto ? le() : i.value.enabled ? ae() : Array.isArray(n.value) ? Jt(() => ue(), f.value.enabled) : O(Ye(n.value))), z = (o) => !o || Array.isArray(o) && !o.length ? null : t.timePicker ? N(Ye(o)) : t.monthPicker ? R(Ye(o)) : t.yearPicker ? C(Ye(o)) : i.value.enabled ? B(Ye(o)) : t.weekPicker ? V(Ye(o)) : J(Ye(o)), ee = (o) => {
    const s = z(o);
    Ra(Ye(s)) ? (n.value = Ye(s), g()) : (n.value = null, T.value = "");
  }, L = () => {
    const o = (s) => format(s, a.value.format);
    return `${o(n.value[0])} ${a.value.rangeSeparator} ${n.value[1] ? o(n.value[1]) : ""}`;
  }, c = () => l.value && n.value ? Array.isArray(n.value) ? L() : format(n.value, a.value.format) : I(n.value), b = () => n.value ? i.value.enabled ? n.value.map((o) => I(o)).join("; ") : a.value.enabled && typeof a.value.format == "string" ? c() : I(n.value) : "", g = () => {
    !t.format || typeof t.format == "string" || a.value.enabled && typeof a.value.format == "string" ? T.value = b() : T.value = t.format(n.value);
  }, q = (o) => {
    if (t.utc) {
      const s = new Date(o);
      return t.utc === "preserve" ? new Date(s.getTime() + s.getTimezoneOffset() * 6e4) : s;
    }
    return t.modelType ? Ol.includes(t.modelType) ? M(new Date(o)) : t.modelType === "format" && (typeof t.format == "string" || !t.format) ? M(
      parse(o, P(), /* @__PURE__ */ new Date(), { locale: S.value })
    ) : M(
      parse(o, t.modelType, /* @__PURE__ */ new Date(), { locale: S.value })
    ) : M(new Date(o));
  }, O = (o) => o ? t.utc ? ul(o, t.utc === "preserve", t.enableSeconds) : t.modelType ? t.modelType === "timestamp" ? +Y(o) : t.modelType === "iso" ? Y(o).toISOString() : t.modelType === "format" && (typeof t.format == "string" || !t.format) ? I(Y(o)) : I(Y(o), t.modelType, true) : Y(o) : "", p = (o, s = false, v = false) => {
    if (v)
      return o;
    if (e("update:model-value", o), r.value.emitTimezone && s) {
      const ie = Array.isArray(o) ? o.map((te) => it(Ye(te), r.value.emitTimezone)) : it(Ye(o), r.value.emitTimezone);
      e("update:model-timezone-value", ie);
    }
  }, j = (o) => Array.isArray(n.value) ? i.value.enabled ? n.value.map((s) => o(s)) : [
    o(n.value[0]),
    n.value[1] ? o(n.value[1]) : Rt(f.value.partialRange)
  ] : o(Ye(n.value)), ne = () => {
    if (Array.isArray(n.value)) {
      const o = st(n.value[0], t.weekStart), s = n.value[1] ? st(n.value[1], t.weekStart) : [];
      return [o.map((v) => H(v)), s.map((v) => H(v))];
    }
    return st(n.value, t.weekStart).map((o) => H(o));
  }, u = (o, s) => p(Ye(j(o)), false, s), k = (o) => {
    const s = ne();
    return o ? s : e("update:model-value", ne());
  }, m = (o = false) => (g(), t.monthPicker ? u(F, o) : t.timePicker ? u($, o) : t.yearPicker ? u(getYear, o) : t.weekPicker ? k(o) : p(_(o), true, o));
  return {
    inputValue: T,
    internalModelValue: n,
    checkBeforeEmit: () => n.value ? f.value.enabled ? f.value.partialRange ? n.value.length >= 1 : n.value.length === 2 : !!n.value : false,
    parseExternalModelValue: ee,
    formatInputValue: g,
    emitModelValue: m
  };
};
var Yl = (e, t) => {
  const { defaultedFilters: l, propDates: n } = Ce(e), { validateMonthYearInRange: a } = ht(e), f = (h2, S) => {
    let M = h2;
    return l.value.months.includes(getMonth(M)) ? (M = S ? addMonths(h2, 1) : subMonths(h2, 1), f(M, S)) : M;
  }, r = (h2, S) => {
    let M = h2;
    return l.value.years.includes(getYear(M)) ? (M = S ? addYears(h2, 1) : subYears(h2, 1), r(M, S)) : M;
  }, i = (h2, S = false) => {
    const M = set(H(), { month: e.month, year: e.year });
    let Y = h2 ? addMonths(M, 1) : subMonths(M, 1);
    e.disableYearSelect && (Y = setYear(Y, e.year));
    let I = getMonth(Y), $ = getYear(Y);
    l.value.months.includes(I) && (Y = f(Y, h2), I = getMonth(Y), $ = getYear(Y)), l.value.years.includes($) && (Y = r(Y, h2), $ = getYear(Y)), a(I, $, h2, e.preventMinMaxNavigation) && P(I, $, S);
  }, P = (h2, S, M) => {
    t("update-month-year", { month: h2, year: S, fromNav: M });
  }, T = computed(() => (h2) => wn(
    set(H(), { month: e.month, year: e.year }),
    n.value.maxDate,
    n.value.minDate,
    e.preventMinMaxNavigation,
    h2
  ));
  return { handleMonthYearChange: i, isDisabled: T, updateMonthYear: P };
};
var Pt = ((e) => (e.center = "center", e.left = "left", e.right = "right", e))(Pt || {});
var Il = ({
  menuRef: e,
  menuRefInner: t,
  inputRef: l,
  pickerWrapperRef: n,
  inline: a,
  emit: f,
  props: r,
  slots: i
}) => {
  const P = ref({}), T = ref(false), h2 = ref({
    top: "0",
    left: "0"
  }), S = ref(false), M = toRef(r, "teleportCenter");
  watch(M, () => {
    h2.value = JSON.parse(JSON.stringify({})), R();
  });
  const Y = (c) => {
    if (r.teleport) {
      const b = c.getBoundingClientRect();
      return {
        left: b.left + window.scrollX,
        top: b.top + window.scrollY
      };
    }
    return { top: 0, left: 0 };
  }, I = (c, b) => {
    h2.value.left = `${c + b - P.value.width}px`;
  }, $ = (c) => {
    h2.value.left = `${c}px`;
  }, F = (c, b) => {
    r.position === Pt.left && $(c), r.position === Pt.right && I(c, b), r.position === Pt.center && (h2.value.left = `${c + b / 2 - P.value.width / 2}px`);
  }, C = (c) => {
    const { width: b, height: g } = c.getBoundingClientRect(), { top: q, left: O } = r.altPosition ? r.altPosition(c) : Y(c);
    return { top: +q, left: +O, width: b, height: g };
  }, E = () => {
    h2.value.left = "50%", h2.value.top = "50%", h2.value.transform = "translate(-50%, -50%)", h2.value.position = "fixed", delete h2.value.opacity;
  }, N = () => {
    const c = Ee(l), { top: b, left: g, transform: q } = r.altPosition(c);
    h2.value = { top: `${b}px`, left: `${g}px`, transform: q ?? "" };
  }, R = (c = true) => {
    var b;
    if (!a.value.enabled) {
      if (M.value)
        return E();
      if (r.altPosition !== null)
        return N();
      if (c) {
        const g = r.teleport ? (b = t.value) == null ? void 0 : b.$el : e.value;
        g && (P.value = g.getBoundingClientRect()), f("recalculate-position");
      }
      return ae();
    }
  }, B = ({ inputEl: c, left: b, width: g }) => {
    window.screen.width > 768 && !T.value && F(b, g), A(c);
  }, V = (c) => {
    const { top: b, left: g, height: q, width: O } = C(c);
    h2.value.top = `${q + b + +r.offset}px`, S.value = false, T.value || (h2.value.left = `${g + O / 2 - P.value.width / 2}px`), B({ inputEl: c, left: g, width: O });
  }, J = (c) => {
    const { top: b, left: g, width: q } = C(c);
    h2.value.top = `${b - +r.offset - P.value.height}px`, S.value = true, B({ inputEl: c, left: g, width: q });
  }, A = (c) => {
    if (r.autoPosition) {
      const { left: b, width: g } = C(c), { left: q, right: O } = P.value;
      if (!T.value) {
        if (Math.abs(q) !== Math.abs(O)) {
          if (q <= 0)
            return T.value = true, $(b);
          if (O >= document.documentElement.clientWidth)
            return T.value = true, I(b, g);
        }
        return F(b, g);
      }
    }
  }, ue = () => {
    const c = Ee(l);
    if (c) {
      const { height: b } = P.value, { top: g, height: q } = c.getBoundingClientRect(), p = window.innerHeight - g - q, j = g;
      return b <= p ? wt.bottom : b > p && b <= j ? wt.top : p >= j ? wt.bottom : wt.top;
    }
    return wt.bottom;
  }, le = (c) => ue() === wt.bottom ? V(c) : J(c), ae = () => {
    const c = Ee(l);
    if (c)
      return r.autoPosition ? le(c) : V(c);
  }, _ = function(c) {
    if (c) {
      const b = c.scrollHeight > c.clientHeight, q = window.getComputedStyle(c).overflowY.indexOf("hidden") !== -1;
      return b && !q;
    }
    return true;
  }, z = function(c) {
    return !c || c === document.body || c.nodeType === Node.DOCUMENT_FRAGMENT_NODE ? window : _(c) ? c : z(c.parentNode);
  }, ee = (c) => {
    if (c)
      switch (r.position) {
        case Pt.left:
          return { left: 0, transform: "translateX(0)" };
        case Pt.right:
          return { left: `${c.width}px`, transform: "translateX(-100%)" };
        default:
          return { left: `${c.width / 2}px`, transform: "translateX(-50%)" };
      }
    return {};
  };
  return {
    openOnTop: S,
    menuStyle: h2,
    xCorrect: T,
    setMenuPosition: R,
    getScrollableParent: z,
    shadowRender: (c, b) => {
      var ne, u, k;
      const g = document.createElement("div"), q = (ne = Ee(l)) == null ? void 0 : ne.getBoundingClientRect();
      g.setAttribute("id", "dp--temp-container");
      const O = (u = n.value) != null && u.clientWidth ? n.value : document.body;
      O.append(g);
      const p = ee(q), j = h(
        c,
        {
          ...b,
          shadow: true,
          style: { opacity: 0, position: "absolute", ...p }
        },
        Object.fromEntries(
          Object.keys(i).filter((m) => ["right-sidebar", "left-sidebar", "top-extra", "action-extra"].includes(m)).map((m) => [m, i[m]])
        )
      );
      render(j, g), P.value = (k = j.el) == null ? void 0 : k.getBoundingClientRect(), render(null, g), O.removeChild(g);
    }
  };
};
var ft = [
  { name: "clock-icon", use: ["time", "calendar", "shared"] },
  { name: "arrow-left", use: ["month-year", "calendar", "shared", "year-mode"] },
  { name: "arrow-right", use: ["month-year", "calendar", "shared", "year-mode"] },
  { name: "arrow-up", use: ["time", "calendar", "month-year", "shared"] },
  { name: "arrow-down", use: ["time", "calendar", "month-year", "shared"] },
  { name: "calendar-icon", use: ["month-year", "time", "calendar", "shared", "year-mode"] },
  { name: "day", use: ["calendar", "shared"] },
  { name: "month-overlay-value", use: ["calendar", "month-year", "shared"] },
  { name: "year-overlay-value", use: ["calendar", "month-year", "shared", "year-mode"] },
  { name: "year-overlay", use: ["month-year", "shared"] },
  { name: "month-overlay", use: ["month-year", "shared"] },
  { name: "month-overlay-header", use: ["month-year", "shared"] },
  { name: "year-overlay-header", use: ["month-year", "shared"] },
  { name: "hours-overlay-value", use: ["calendar", "time", "shared"] },
  { name: "minutes-overlay-value", use: ["calendar", "time", "shared"] },
  { name: "seconds-overlay-value", use: ["calendar", "time", "shared"] },
  { name: "hours", use: ["calendar", "time", "shared"] },
  { name: "minutes", use: ["calendar", "time", "shared"] },
  { name: "month", use: ["calendar", "month-year", "shared"] },
  { name: "year", use: ["calendar", "month-year", "shared", "year-mode"] },
  { name: "action-buttons", use: ["action"] },
  { name: "action-preview", use: ["action"] },
  { name: "calendar-header", use: ["calendar", "shared"] },
  { name: "marker-tooltip", use: ["calendar", "shared"] },
  { name: "action-extra", use: ["menu"] },
  { name: "time-picker-overlay", use: ["calendar", "time", "shared"] },
  { name: "am-pm-button", use: ["calendar", "time", "shared"] },
  { name: "left-sidebar", use: ["menu"] },
  { name: "right-sidebar", use: ["menu"] },
  { name: "month-year", use: ["month-year", "shared"] },
  { name: "time-picker", use: ["menu", "shared"] },
  { name: "action-row", use: ["action"] },
  { name: "marker", use: ["calendar", "shared"] },
  { name: "quarter", use: ["shared"] },
  { name: "top-extra", use: ["shared", "month-year"] }
];
var Nl = [{ name: "trigger" }, { name: "input-icon" }, { name: "clear-icon" }, { name: "dp-input" }];
var El = {
  all: () => ft,
  monthYear: () => ft.filter((e) => e.use.includes("month-year")),
  input: () => Nl,
  timePicker: () => ft.filter((e) => e.use.includes("time")),
  action: () => ft.filter((e) => e.use.includes("action")),
  calendar: () => ft.filter((e) => e.use.includes("calendar")),
  menu: () => ft.filter((e) => e.use.includes("menu")),
  shared: () => ft.filter((e) => e.use.includes("shared")),
  yearMode: () => ft.filter((e) => e.use.includes("year-mode"))
};
var je = (e, t, l) => {
  const n = [];
  return El[t]().forEach((a) => {
    e[a.name] && n.push(a.name);
  }), l != null && l.length && l.forEach((a) => {
    a.slot && n.push(a.slot);
  }), n;
};
var Kt = (e) => {
  const t = computed(() => (n) => e.value ? n ? e.value.open : e.value.close : ""), l = computed(() => (n) => e.value ? n ? e.value.menuAppearTop : e.value.menuAppearBottom : "");
  return { transitionName: t, showTransition: !!e.value, menuTransition: l };
};
var Gt = (e, t) => {
  const { defaultedRange: l, defaultedTz: n } = Ce(e), a = H(it(H(), n.value.timezone)), f = ref([{ month: getMonth(a), year: getYear(a) }]), r = reactive({
    hours: l.value.enabled ? [getHours(a), getHours(a)] : getHours(a),
    minutes: l.value.enabled ? [getMinutes(a), getMinutes(a)] : getMinutes(a),
    seconds: l.value.enabled ? [0, 0] : 0
  }), i = computed({
    get: () => e.internalModelValue,
    set: (h2) => {
      !e.readonly && !e.disabled && t("update:internal-model-value", h2);
    }
  }), P = computed(
    () => (h2) => f.value[h2] ? f.value[h2].month : 0
  ), T = computed(
    () => (h2) => f.value[h2] ? f.value[h2].year : 0
  );
  return {
    calendars: f,
    time: r,
    modelValue: i,
    month: P,
    year: T
  };
};
var Fl = (e, t) => {
  const { defaultedMultiCalendars: l, defaultedMultiDates: n, defaultedHighlight: a, defaultedTz: f, propDates: r, defaultedRange: i } = Ce(t), { isDisabled: P } = ht(t), T = ref(null), h2 = ref(it(/* @__PURE__ */ new Date(), f.value.timezone)), S = (u) => {
    !u.current && t.hideOffsetDates || (T.value = u.value);
  }, M = () => {
    T.value = null;
  }, Y = (u) => Array.isArray(e.value) && i.value.enabled && e.value[0] && T.value ? u ? Be(T.value, e.value[0]) : _e(T.value, e.value[0]) : true, I = (u, k) => {
    const m = () => e.value ? k ? e.value[0] || null : e.value[1] : null, X = e.value && Array.isArray(e.value) ? m() : null;
    return ke(H(u.value), X);
  }, $ = (u) => {
    const k = Array.isArray(e.value) ? e.value[0] : null;
    return u ? !_e(T.value ?? null, k) : true;
  }, F = (u, k = true) => (i.value.enabled || t.weekPicker) && Array.isArray(e.value) && e.value.length === 2 ? t.hideOffsetDates && !u.current ? false : ke(H(u.value), e.value[k ? 0 : 1]) : i.value.enabled ? I(u, k) && $(k) || ke(u.value, Array.isArray(e.value) ? e.value[0] : null) && Y(k) : false, C = (u, k) => {
    if (Array.isArray(e.value) && e.value[0] && e.value.length === 1) {
      const m = ke(u.value, T.value);
      return k ? Be(e.value[0], u.value) && m : _e(e.value[0], u.value) && m;
    }
    return false;
  }, E = (u) => !e.value || t.hideOffsetDates && !u.current ? false : i.value.enabled ? t.modelAuto && Array.isArray(e.value) ? ke(u.value, e.value[0] ? e.value[0] : h2.value) : false : n.value.enabled && Array.isArray(e.value) ? e.value.some((k) => ke(k, u.value)) : ke(u.value, e.value ? e.value : h2.value), N = (u) => {
    if (i.value.autoRange || t.weekPicker) {
      if (T.value) {
        if (t.hideOffsetDates && !u.current)
          return false;
        const k = addDays(T.value, +i.value.autoRange), m = st(H(T.value), t.weekStart);
        return t.weekPicker ? ke(m[1], H(u.value)) : ke(k, H(u.value));
      }
      return false;
    }
    return false;
  }, R = (u) => {
    if (i.value.autoRange || t.weekPicker) {
      if (T.value) {
        const k = addDays(T.value, +i.value.autoRange);
        if (t.hideOffsetDates && !u.current)
          return false;
        const m = st(H(T.value), t.weekStart);
        return t.weekPicker ? Be(u.value, m[0]) && _e(u.value, m[1]) : Be(u.value, T.value) && _e(u.value, k);
      }
      return false;
    }
    return false;
  }, B = (u) => {
    if (i.value.autoRange || t.weekPicker) {
      if (T.value) {
        if (t.hideOffsetDates && !u.current)
          return false;
        const k = st(H(T.value), t.weekStart);
        return t.weekPicker ? ke(k[0], u.value) : ke(T.value, u.value);
      }
      return false;
    }
    return false;
  }, V = (u) => ra(e.value, T.value, u.value), J = () => t.modelAuto && Array.isArray(t.internalModelValue) ? !!t.internalModelValue[0] : false, A = () => t.modelAuto ? mn(t.internalModelValue) : true, ue = (u) => {
    if (t.weekPicker)
      return false;
    const k = i.value.enabled ? !F(u) && !F(u, false) : true;
    return !P(u.value) && !E(u) && !(!u.current && t.hideOffsetDates) && k;
  }, le = (u) => i.value.enabled ? t.modelAuto ? J() && E(u) : false : E(u), ae = (u) => a.value ? ol(u.value, r.value.highlight) : false, _ = (u) => {
    const k = P(u.value);
    return k && (typeof a.value == "function" ? !a.value(u.value, k) : !a.value.options.highlightDisabled);
  }, z = (u) => {
    var k;
    return typeof a.value == "function" ? a.value(u.value) : (k = a.value.weekdays) == null ? void 0 : k.includes(u.value.getDay());
  }, ee = (u) => (i.value.enabled || t.weekPicker) && (!(l.value.count > 0) || u.current) && A() && !(!u.current && t.hideOffsetDates) && !E(u) ? V(u) : false, L = (u) => {
    const { isRangeStart: k, isRangeEnd: m } = q(u), X = i.value.enabled ? k || m : false;
    return {
      dp__cell_offset: !u.current,
      dp__pointer: !t.disabled && !(!u.current && t.hideOffsetDates) && !P(u.value),
      dp__cell_disabled: P(u.value),
      dp__cell_highlight: !_(u) && (ae(u) || z(u)) && !le(u) && !X && !B(u) && !(ee(u) && t.weekPicker) && !m,
      dp__cell_highlight_active: !_(u) && (ae(u) || z(u)) && le(u),
      dp__today: !t.noToday && ke(u.value, h2.value) && u.current,
      "dp--past": _e(u.value, h2.value),
      "dp--future": Be(u.value, h2.value)
    };
  }, c = (u) => ({
    dp__active_date: le(u),
    dp__date_hover: ue(u)
  }), b = (u) => {
    if (e.value && !Array.isArray(e.value)) {
      const k = st(e.value, t.weekStart);
      return {
        ...p(u),
        dp__range_start: ke(k[0], u.value),
        dp__range_end: ke(k[1], u.value),
        dp__range_between_week: Be(u.value, k[0]) && _e(u.value, k[1])
      };
    }
    return {
      ...p(u)
    };
  }, g = (u) => {
    if (e.value && Array.isArray(e.value)) {
      const k = st(e.value[0], t.weekStart), m = e.value[1] ? st(e.value[1], t.weekStart) : [];
      return {
        ...p(u),
        dp__range_start: ke(k[0], u.value) || ke(m[0], u.value),
        dp__range_end: ke(k[1], u.value) || ke(m[1], u.value),
        dp__range_between_week: Be(u.value, k[0]) && _e(u.value, k[1]) || Be(u.value, m[0]) && _e(u.value, m[1]),
        dp__range_between: Be(u.value, k[1]) && _e(u.value, m[0])
      };
    }
    return {
      ...p(u)
    };
  }, q = (u) => {
    const k = l.value.count > 0 ? u.current && F(u) && A() : F(u) && A(), m = l.value.count > 0 ? u.current && F(u, false) && A() : F(u, false) && A();
    return { isRangeStart: k, isRangeEnd: m };
  }, O = (u) => {
    const { isRangeStart: k, isRangeEnd: m } = q(u);
    return {
      dp__range_start: k,
      dp__range_end: m,
      dp__range_between: ee(u),
      dp__date_hover: ke(u.value, T.value) && !k && !m && !t.weekPicker,
      dp__date_hover_start: C(u, true),
      dp__date_hover_end: C(u, false)
    };
  }, p = (u) => ({
    ...O(u),
    dp__cell_auto_range: R(u),
    dp__cell_auto_range_start: B(u),
    dp__cell_auto_range_end: N(u)
  }), j = (u) => i.value.enabled ? i.value.autoRange ? p(u) : t.modelAuto ? { ...c(u), ...O(u) } : t.weekPicker ? g(u) : O(u) : t.weekPicker ? b(u) : c(u);
  return {
    setHoverDate: S,
    clearHoverDate: M,
    getDayClassData: (u) => t.hideOffsetDates && !u.current ? {} : {
      ...L(u),
      ...j(u),
      [t.dayClass ? t.dayClass(u.value) : ""]: true,
      [t.calendarCellClassName]: !!t.calendarCellClassName
    }
  };
};
var ht = (e) => {
  const { defaultedFilters: t, defaultedRange: l, propDates: n, defaultedMultiDates: a } = Ce(e), f = (_) => n.value.disabledDates ? typeof n.value.disabledDates == "function" ? n.value.disabledDates(H(_)) : !!aa(_, n.value.disabledDates) : false, r = (_) => {
    const z = n.value.maxDate ? Be(_, n.value.maxDate) : false, ee = n.value.minDate ? _e(_, n.value.minDate) : false, L = f(_), b = t.value.months.map((j) => +j).includes(getMonth(_)), g = e.disabledWeekDays.length ? e.disabledWeekDays.some((j) => +j === getDay(_)) : false, q = S(_), O = getYear(_), p = O < +e.yearRange[0] || O > +e.yearRange[1];
    return !(z || ee || L || b || p || g || q);
  }, i = (_, z) => _e(...vt(n.value.minDate, _, z)) || ke(...vt(n.value.minDate, _, z)), P = (_, z) => Be(...vt(n.value.maxDate, _, z)) || ke(...vt(n.value.maxDate, _, z)), T = (_, z, ee) => {
    let L = false;
    return n.value.maxDate && ee && P(_, z) && (L = true), n.value.minDate && !ee && i(_, z) && (L = true), L;
  }, h2 = (_, z, ee, L) => {
    let c = false;
    return L ? n.value.minDate && n.value.maxDate ? c = T(_, z, ee) : (n.value.minDate && i(_, z) || n.value.maxDate && P(_, z)) && (c = true) : c = true, c;
  }, S = (_) => Array.isArray(n.value.allowedDates) && !n.value.allowedDates.length ? true : n.value.allowedDates ? !aa(_, n.value.allowedDates) : false, M = (_) => !r(_), Y = (_) => l.value.noDisabledRange ? !eachDayOfInterval({ start: _[0], end: _[1] }).some((ee) => M(ee)) : true, I = (_) => {
    if (_) {
      const z = getYear(_);
      return z >= +e.yearRange[0] && z <= e.yearRange[1];
    }
    return true;
  }, $ = (_, z) => !!(Array.isArray(_) && _[z] && (l.value.maxRange || l.value.minRange) && I(_[z])), F = (_, z, ee = 0) => {
    if ($(z, ee) && I(_)) {
      const L = differenceInCalendarDays(_, z[ee]), c = bn(z[ee], _), b = c.length === 1 ? 0 : c.filter((q) => M(q)).length, g = Math.abs(L) - (l.value.minMaxRawRange ? 0 : b);
      if (l.value.minRange && l.value.maxRange)
        return g >= +l.value.minRange && g <= +l.value.maxRange;
      if (l.value.minRange)
        return g >= +l.value.minRange;
      if (l.value.maxRange)
        return g <= +l.value.maxRange;
    }
    return true;
  }, C = () => !e.enableTimePicker || e.monthPicker || e.yearPicker || e.ignoreTimeValidation, E = (_) => Array.isArray(_) ? [_[0] ? ka(_[0]) : null, _[1] ? ka(_[1]) : null] : ka(_), N = (_, z, ee) => _.find(
    (L) => +L.hours === getHours(z) && L.minutes === "*" ? true : +L.minutes === getMinutes(z) && +L.hours === getHours(z)
  ) && ee, R = (_, z, ee) => {
    const [L, c] = _, [b, g] = z;
    return !N(L, b, ee) && !N(c, g, ee) && ee;
  }, B = (_, z) => {
    const ee = Array.isArray(z) ? z : [z];
    return Array.isArray(e.disabledTimes) ? Array.isArray(e.disabledTimes[0]) ? R(e.disabledTimes, ee, _) : !ee.some((L) => N(e.disabledTimes, L, _)) : _;
  }, V = (_, z) => {
    const ee = Array.isArray(z) ? [$t(z[0]), z[1] ? $t(z[1]) : void 0] : $t(z), L = !e.disabledTimes(ee);
    return _ && L;
  }, J = (_, z) => e.disabledTimes ? Array.isArray(e.disabledTimes) ? B(z, _) : V(z, _) : z, A = (_) => {
    let z = true;
    if (!_ || C())
      return true;
    const ee = !n.value.minDate && !n.value.maxDate ? E(_) : _;
    return (e.maxTime || n.value.maxDate) && (z = xa(
      e.maxTime,
      n.value.maxDate,
      "max",
      Ye(ee),
      z
    )), (e.minTime || n.value.minDate) && (z = xa(
      e.minTime,
      n.value.minDate,
      "min",
      Ye(ee),
      z
    )), J(_, z);
  }, ue = (_) => {
    if (!e.monthPicker)
      return true;
    let z = true;
    const ee = H(xe(_));
    if (n.value.minDate && n.value.maxDate) {
      const L = H(xe(n.value.minDate)), c = H(xe(n.value.maxDate));
      return Be(ee, L) && _e(ee, c) || ke(ee, L) || ke(ee, c);
    }
    if (n.value.minDate) {
      const L = H(xe(n.value.minDate));
      z = Be(ee, L) || ke(ee, L);
    }
    if (n.value.maxDate) {
      const L = H(xe(n.value.maxDate));
      z = _e(ee, L) || ke(ee, L);
    }
    return z;
  }, le = computed(() => (_) => !e.enableTimePicker || e.ignoreTimeValidation ? true : A(_)), ae = computed(() => (_) => e.monthPicker ? Array.isArray(_) && (l.value.enabled || a.value.enabled) ? !_.filter((ee) => !ue(ee)).length : ue(_) : true);
  return {
    isDisabled: M,
    validateDate: r,
    validateMonthYearInRange: h2,
    isDateRangeAllowed: Y,
    checkMinMaxRange: F,
    isValidTime: A,
    isTimeValid: le,
    isMonthValid: ae
  };
};
var oa = () => {
  const e = computed(() => (n, a) => n == null ? void 0 : n.includes(a)), t = computed(() => (n, a) => n.count ? n.solo ? true : a === 0 : true), l = computed(() => (n, a) => n.count ? n.solo ? true : a === n.count - 1 : true);
  return { hideNavigationButtons: e, showLeftIcon: t, showRightIcon: l };
};
var Ll = (e, t, l) => {
  const n = ref(0), a = reactive({
    [At.timePicker]: !e.enableTimePicker || e.timePicker || e.monthPicker,
    [At.calendar]: false,
    [At.header]: false
  }), f = computed(() => e.monthPicker), r = (S) => {
    var M;
    if ((M = e.flow) != null && M.length) {
      if (!S && f.value)
        return h2();
      a[S] = true, Object.keys(a).filter((Y) => !a[Y]).length || h2();
    }
  }, i = () => {
    var S;
    (S = e.flow) != null && S.length && n.value !== -1 && (n.value += 1, t("flow-step", n.value), h2());
  }, P = () => {
    n.value = -1;
  }, T = (S, M, ...Y) => {
    var I, $;
    e.flow[n.value] === S && l.value && (($ = (I = l.value)[M]) == null || $.call(I, ...Y));
  }, h2 = () => {
    T(nt.month, "toggleMonthPicker", true), T(nt.year, "toggleYearPicker", true), T(nt.calendar, "toggleTimePicker", false, true), T(nt.time, "toggleTimePicker", true, true);
    const S = e.flow[n.value];
    (S === nt.hours || S === nt.minutes || S === nt.seconds) && T(S, "toggleTimePicker", true, true, S);
  };
  return { childMount: r, updateFlowStep: i, resetFlow: P, flowStep: n };
};
var sa = {
  multiCalendars: { type: [Boolean, Number, String, Object], default: void 0 },
  modelValue: { type: [String, Date, Array, Object, Number], default: null },
  modelType: { type: String, default: null },
  position: { type: String, default: "center" },
  dark: { type: Boolean, default: false },
  format: {
    type: [String, Function],
    default: () => null
  },
  autoPosition: { type: Boolean, default: true },
  altPosition: { type: Function, default: null },
  transitions: { type: [Boolean, Object], default: true },
  formatLocale: { type: Object, default: null },
  utc: { type: [Boolean, String], default: false },
  ariaLabels: { type: Object, default: () => ({}) },
  offset: { type: [Number, String], default: 10 },
  hideNavigation: { type: Array, default: () => [] },
  timezone: { type: [String, Object], default: null },
  emitTimezone: { type: String, default: null },
  vertical: { type: Boolean, default: false },
  disableMonthYearSelect: { type: Boolean, default: false },
  disableYearSelect: { type: Boolean, default: false },
  menuClassName: { type: String, default: null },
  dayClass: { type: Function, default: null },
  yearRange: { type: Array, default: () => [1900, 2100] },
  calendarCellClassName: { type: String, default: null },
  enableTimePicker: { type: Boolean, default: true },
  autoApply: { type: Boolean, default: false },
  disabledDates: { type: [Array, Function], default: () => [] },
  monthNameFormat: { type: String, default: "short" },
  startDate: { type: [Date, String], default: null },
  startTime: { type: [Object, Array], default: null },
  hideOffsetDates: { type: Boolean, default: false },
  autoRange: { type: [Number, String], default: null },
  noToday: { type: Boolean, default: false },
  disabledWeekDays: { type: Array, default: () => [] },
  allowedDates: { type: Array, default: null },
  nowButtonLabel: { type: String, default: "Now" },
  markers: { type: Array, default: () => [] },
  escClose: { type: Boolean, default: true },
  spaceConfirm: { type: Boolean, default: true },
  monthChangeOnArrows: { type: Boolean, default: true },
  presetDates: { type: Array, default: () => [] },
  flow: { type: Array, default: () => [] },
  partialFlow: { type: Boolean, default: false },
  preventMinMaxNavigation: { type: Boolean, default: false },
  minRange: { type: [Number, String], default: null },
  maxRange: { type: [Number, String], default: null },
  multiDatesLimit: { type: [Number, String], default: null },
  reverseYears: { type: Boolean, default: false },
  weekPicker: { type: Boolean, default: false },
  filters: { type: Object, default: () => ({}) },
  arrowNavigation: { type: Boolean, default: false },
  disableTimeRangeValidation: { type: Boolean, default: false },
  highlight: {
    type: [Function, Object],
    default: null
  },
  teleport: { type: [Boolean, String, Object], default: null },
  teleportCenter: { type: Boolean, default: false },
  locale: { type: String, default: "en-Us" },
  weekNumName: { type: String, default: "W" },
  weekStart: { type: [Number, String], default: 1 },
  weekNumbers: {
    type: [String, Function, Object],
    default: null
  },
  calendarClassName: { type: String, default: null },
  monthChangeOnScroll: { type: [Boolean, String], default: true },
  dayNames: {
    type: [Function, Array],
    default: null
  },
  monthPicker: { type: Boolean, default: false },
  customProps: { type: Object, default: null },
  yearPicker: { type: Boolean, default: false },
  modelAuto: { type: Boolean, default: false },
  selectText: { type: String, default: "Select" },
  cancelText: { type: String, default: "Cancel" },
  previewFormat: {
    type: [String, Function],
    default: () => ""
  },
  multiDates: { type: [Object, Boolean], default: false },
  partialRange: { type: Boolean, default: true },
  ignoreTimeValidation: { type: Boolean, default: false },
  minDate: { type: [Date, String], default: null },
  maxDate: { type: [Date, String], default: null },
  minTime: { type: Object, default: null },
  maxTime: { type: Object, default: null },
  name: { type: String, default: null },
  placeholder: { type: String, default: "" },
  hideInputIcon: { type: Boolean, default: false },
  clearable: { type: Boolean, default: true },
  state: { type: Boolean, default: null },
  required: { type: Boolean, default: false },
  autocomplete: { type: String, default: "off" },
  inputClassName: { type: String, default: null },
  fixedStart: { type: Boolean, default: false },
  fixedEnd: { type: Boolean, default: false },
  timePicker: { type: Boolean, default: false },
  enableSeconds: { type: Boolean, default: false },
  is24: { type: Boolean, default: true },
  noHoursOverlay: { type: Boolean, default: false },
  noMinutesOverlay: { type: Boolean, default: false },
  noSecondsOverlay: { type: Boolean, default: false },
  hoursGridIncrement: { type: [String, Number], default: 1 },
  minutesGridIncrement: { type: [String, Number], default: 5 },
  secondsGridIncrement: { type: [String, Number], default: 5 },
  hoursIncrement: { type: [Number, String], default: 1 },
  minutesIncrement: { type: [Number, String], default: 1 },
  secondsIncrement: { type: [Number, String], default: 1 },
  range: { type: [Boolean, Object], default: false },
  uid: { type: String, default: null },
  disabled: { type: Boolean, default: false },
  readonly: { type: Boolean, default: false },
  inline: { type: [Boolean, Object], default: false },
  textInput: { type: [Boolean, Object], default: false },
  noDisabledRange: { type: Boolean, default: false },
  sixWeeks: { type: [Boolean, String], default: false },
  actionRow: { type: Object, default: () => ({}) },
  focusStartDate: { type: Boolean, default: false },
  disabledTimes: { type: [Function, Array], default: void 0 },
  showLastInRange: { type: Boolean, default: true },
  timePickerInline: { type: Boolean, default: false },
  calendar: { type: Function, default: null },
  config: { type: Object, default: void 0 },
  quarterPicker: { type: Boolean, default: false },
  yearFirst: { type: Boolean, default: false },
  loading: { type: Boolean, default: false },
  onInternalModelChange: { type: [Function, Object], default: null }
};
var at = {
  ...sa,
  shadow: { type: Boolean, default: false },
  flowStep: { type: Number, default: 0 },
  internalModelValue: { type: [Date, Array], default: null },
  noOverlayFocus: { type: Boolean, default: false },
  collapse: { type: Boolean, default: false },
  menuWrapRef: { type: Object, default: null },
  getInputRect: { type: Function, default: () => ({}) }
};
var Vl = {
  key: 1,
  class: "dp__input_wrap"
};
var Wl = ["id", "name", "inputmode", "placeholder", "disabled", "readonly", "required", "value", "autocomplete", "aria-label", "aria-disabled", "aria-invalid"];
var Hl = {
  key: 2,
  class: "dp__clear_icon"
};
var zl = defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "DatepickerInput",
  props: {
    isMenuOpen: { type: Boolean, default: false },
    inputValue: { type: String, default: "" },
    ...sa
  },
  emits: [
    "clear",
    "open",
    "update:input-value",
    "set-input-date",
    "close",
    "select-date",
    "set-empty-date",
    "toggle",
    "focus-prev",
    "focus",
    "blur",
    "real-blur"
  ],
  setup(e, { expose: t, emit: l }) {
    const n = l, a = e, {
      defaultedTextInput: f,
      defaultedAriaLabels: r,
      defaultedInline: i,
      defaultedConfig: P,
      defaultedRange: T,
      defaultedMultiDates: h2,
      getDefaultPattern: S,
      getDefaultStartTime: M
    } = Ce(a), { checkMinMaxRange: Y } = ht(a), I = ref(), $ = ref(null), F = ref(false), C = ref(false), E = computed(
      () => ({
        dp__pointer: !a.disabled && !a.readonly && !f.value.enabled,
        dp__disabled: a.disabled,
        dp__input_readonly: !f.value.enabled,
        dp__input: true,
        dp__input_icon_pad: !a.hideInputIcon,
        dp__input_valid: !!a.state,
        dp__input_invalid: a.state === false,
        dp__input_focus: F.value || a.isMenuOpen,
        dp__input_reg: !f.value.enabled,
        [a.inputClassName]: !!a.inputClassName
      })
    ), N = () => {
      n("set-input-date", null), a.clearable && a.autoApply && (n("set-empty-date"), I.value = null);
    }, R = (g) => {
      const q = M();
      return sl(
        g,
        f.value.format ?? S(),
        q ?? kn({}, a.enableSeconds),
        a.inputValue,
        C.value,
        a.formatLocale
      );
    }, B = (g) => {
      const { rangeSeparator: q } = f.value, [O, p] = g.split(`${q}`);
      if (O) {
        const j = R(O.trim()), ne = p ? R(p.trim()) : null, u = j && ne ? [j, ne] : [j];
        Y(ne, u, 0) && (I.value = j ? u : null);
      }
    }, V = () => {
      C.value = true;
    }, J = (g) => {
      if (T.value.enabled)
        B(g);
      else if (h2.value.enabled) {
        const q = g.split(";");
        I.value = q.map((O) => R(O.trim())).filter((O) => O);
      } else
        I.value = R(g);
    }, A = (g) => {
      var O;
      const q = typeof g == "string" ? g : (O = g.target) == null ? void 0 : O.value;
      q !== "" ? (f.value.openMenu && !a.isMenuOpen && n("open"), J(q), n("set-input-date", I.value)) : N(), C.value = false, n("update:input-value", q);
    }, ue = (g) => {
      f.value.enabled ? (J(g.target.value), f.value.enterSubmit && Ra(I.value) && a.inputValue !== "" ? (n("set-input-date", I.value, true), I.value = null) : f.value.enterSubmit && a.inputValue === "" && (I.value = null, n("clear"))) : _(g);
    }, le = (g) => {
      f.value.enabled && f.value.tabSubmit && J(g.target.value), f.value.tabSubmit && Ra(I.value) && a.inputValue !== "" ? (n("set-input-date", I.value, true, true), I.value = null) : f.value.tabSubmit && a.inputValue === "" && (I.value = null, n("clear", true));
    }, ae = () => {
      F.value = true, n("focus"), nextTick().then(() => {
        var g;
        f.value.enabled && f.value.selectOnFocus && ((g = $.value) == null || g.select());
      });
    }, _ = (g) => {
      g.preventDefault(), mt(g, P.value, true), f.value.enabled && f.value.openMenu && !i.value.input && !a.isMenuOpen ? n("open") : f.value.enabled || n("toggle");
    }, z = () => {
      n("real-blur"), F.value = false, (!a.isMenuOpen || i.value.enabled && i.value.input) && n("blur"), a.autoApply && f.value.enabled && I.value && !a.isMenuOpen && (n("set-input-date", I.value), n("select-date"), I.value = null);
    }, ee = (g) => {
      mt(g, P.value, true), n("clear");
    }, L = (g) => {
      if (!f.value.enabled) {
        if (g.code === "Tab")
          return;
        g.preventDefault();
      }
    };
    return t({
      focusInput: () => {
        var g;
        (g = $.value) == null || g.focus({ preventScroll: true });
      },
      setParsedDate: (g) => {
        I.value = g;
      }
    }), (g, q) => {
      var O;
      return openBlock(), createElementBlock("div", { onClick: _ }, [
        g.$slots.trigger && !g.$slots["dp-input"] && !unref(i).enabled ? renderSlot(g.$slots, "trigger", { key: 0 }) : createCommentVNode("", true),
        !g.$slots.trigger && (!unref(i).enabled || unref(i).input) ? (openBlock(), createElementBlock("div", Vl, [
          g.$slots["dp-input"] && !g.$slots.trigger && (!unref(i).enabled || unref(i).enabled && unref(i).input) ? renderSlot(g.$slots, "dp-input", {
            key: 0,
            value: e.inputValue,
            isMenuOpen: e.isMenuOpen,
            onInput: A,
            onEnter: ue,
            onTab: le,
            onClear: ee,
            onBlur: z,
            onKeypress: L,
            onPaste: V,
            openMenu: () => g.$emit("open"),
            closeMenu: () => g.$emit("close"),
            toggleMenu: () => g.$emit("toggle")
          }) : createCommentVNode("", true),
          g.$slots["dp-input"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("input", {
            key: 1,
            id: g.uid ? `dp-input-${g.uid}` : void 0,
            ref_key: "inputRef",
            ref: $,
            name: g.name,
            class: normalizeClass(E.value),
            inputmode: unref(f).enabled ? "text" : "none",
            placeholder: g.placeholder,
            disabled: g.disabled,
            readonly: g.readonly,
            required: g.required,
            value: e.inputValue,
            autocomplete: g.autocomplete,
            "aria-label": (O = unref(r)) == null ? void 0 : O.input,
            "aria-disabled": g.disabled || void 0,
            "aria-invalid": g.state === false ? true : void 0,
            onInput: A,
            onKeydown: [
              withKeys(ue, ["enter"]),
              withKeys(le, ["tab"]),
              L
            ],
            onBlur: z,
            onFocus: ae,
            onKeypress: L,
            onPaste: V
          }, null, 42, Wl)),
          createBaseVNode("div", {
            onClick: q[2] || (q[2] = (p) => n("toggle"))
          }, [
            g.$slots["input-icon"] && !g.hideInputIcon ? (openBlock(), createElementBlock("span", {
              key: 0,
              class: "dp__input_icon",
              onClick: q[0] || (q[0] = (p) => n("toggle"))
            }, [
              renderSlot(g.$slots, "input-icon")
            ])) : createCommentVNode("", true),
            !g.$slots["input-icon"] && !g.hideInputIcon && !g.$slots["dp-input"] ? (openBlock(), createBlock(unref(It), {
              key: 1,
              class: "dp__input_icon dp__input_icons",
              onClick: q[1] || (q[1] = (p) => n("toggle"))
            })) : createCommentVNode("", true)
          ]),
          g.$slots["clear-icon"] && e.inputValue && g.clearable && !g.disabled && !g.readonly ? (openBlock(), createElementBlock("span", Hl, [
            renderSlot(g.$slots, "clear-icon", { clear: ee })
          ])) : createCommentVNode("", true),
          g.clearable && !g.$slots["clear-icon"] && e.inputValue && !g.disabled && !g.readonly ? (openBlock(), createBlock(unref(fn), {
            key: 3,
            class: "dp__clear_icon dp__input_icons",
            onClick: q[3] || (q[3] = withModifiers((p) => ee(p), ["prevent"]))
          })) : createCommentVNode("", true)
        ])) : createCommentVNode("", true)
      ]);
    };
  }
});
var Ul = ["title"];
var jl = ["disabled"];
var Kl = defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "ActionRow",
  props: {
    menuMount: { type: Boolean, default: false },
    calendarWidth: { type: Number, default: 0 },
    ...at
  },
  emits: ["close-picker", "select-date", "select-now", "invalid-select"],
  setup(e, { emit: t }) {
    const l = t, n = e, {
      defaultedActionRow: a,
      defaultedPreviewFormat: f,
      defaultedMultiCalendars: r,
      defaultedTextInput: i,
      defaultedInline: P,
      defaultedRange: T,
      defaultedMultiDates: h2,
      getDefaultPattern: S
    } = Ce(n), { isTimeValid: M, isMonthValid: Y } = ht(n), { buildMatrix: I } = yt(), $ = ref(null), F = ref(null), C = ref(false), E = ref({}), N = ref(null), R = ref(null);
    onMounted(() => {
      n.arrowNavigation && I([Ee($), Ee(F)], "actionRow"), B(), window.addEventListener("resize", B);
    }), onUnmounted(() => {
      window.removeEventListener("resize", B);
    });
    const B = () => {
      C.value = false, setTimeout(() => {
        var b, g;
        const L = (b = N.value) == null ? void 0 : b.getBoundingClientRect(), c = (g = R.value) == null ? void 0 : g.getBoundingClientRect();
        L && c && (E.value.maxWidth = `${c.width - L.width - 20}px`), C.value = true;
      }, 0);
    }, V = computed(() => T.value.enabled && !T.value.partialRange && n.internalModelValue ? n.internalModelValue.length === 2 : true), J = computed(
      () => !M.value(n.internalModelValue) || !Y.value(n.internalModelValue) || !V.value
    ), A = () => {
      const L = f.value;
      return n.timePicker || n.monthPicker, L(Ye(n.internalModelValue));
    }, ue = () => {
      const L = n.internalModelValue;
      return r.value.count > 0 ? `${le(L[0])} - ${le(L[1])}` : [le(L[0]), le(L[1])];
    }, le = (L) => Mn(
      L,
      f.value,
      n.formatLocale,
      i.value.rangeSeparator,
      n.modelAuto,
      S()
    ), ae = computed(() => !n.internalModelValue || !n.menuMount ? "" : typeof f.value == "string" ? Array.isArray(n.internalModelValue) ? n.internalModelValue.length === 2 && n.internalModelValue[1] ? ue() : h2.value.enabled ? n.internalModelValue.map((L) => `${le(L)}`) : n.modelAuto ? `${le(n.internalModelValue[0])}` : `${le(n.internalModelValue[0])} -` : le(n.internalModelValue) : A()), _ = () => h2.value.enabled ? "; " : " - ", z = computed(
      () => Array.isArray(ae.value) ? ae.value.join(_()) : ae.value
    ), ee = () => {
      M.value(n.internalModelValue) && Y.value(n.internalModelValue) && V.value ? l("select-date") : l("invalid-select");
    };
    return (L, c) => (openBlock(), createElementBlock("div", {
      ref_key: "actionRowRef",
      ref: R,
      class: "dp__action_row"
    }, [
      L.$slots["action-row"] ? renderSlot(L.$slots, "action-row", normalizeProps(mergeProps({ key: 0 }, {
        internalModelValue: L.internalModelValue,
        disabled: J.value,
        selectDate: () => L.$emit("select-date"),
        closePicker: () => L.$emit("close-picker")
      }))) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
        unref(a).showPreview ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: "dp__selection_preview",
          title: z.value,
          style: normalizeStyle(E.value)
        }, [
          L.$slots["action-preview"] && C.value ? renderSlot(L.$slots, "action-preview", {
            key: 0,
            value: L.internalModelValue
          }) : createCommentVNode("", true),
          !L.$slots["action-preview"] && C.value ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createTextVNode(toDisplayString(z.value), 1)
          ], 64)) : createCommentVNode("", true)
        ], 12, Ul)) : createCommentVNode("", true),
        createBaseVNode("div", {
          ref_key: "actionBtnContainer",
          ref: N,
          class: "dp__action_buttons",
          "data-dp-element": "action-row"
        }, [
          L.$slots["action-buttons"] ? renderSlot(L.$slots, "action-buttons", {
            key: 0,
            value: L.internalModelValue
          }) : createCommentVNode("", true),
          L.$slots["action-buttons"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            !unref(P).enabled && unref(a).showCancel ? (openBlock(), createElementBlock("button", {
              key: 0,
              ref_key: "cancelButtonRef",
              ref: $,
              type: "button",
              class: "dp__action_button dp__action_cancel",
              onClick: c[0] || (c[0] = (b) => L.$emit("close-picker")),
              onKeydown: [
                c[1] || (c[1] = withKeys((b) => L.$emit("close-picker"), ["enter"])),
                c[2] || (c[2] = withKeys((b) => L.$emit("close-picker"), ["space"]))
              ]
            }, toDisplayString(L.cancelText), 545)) : createCommentVNode("", true),
            unref(a).showNow ? (openBlock(), createElementBlock("button", {
              key: 1,
              type: "button",
              class: "dp__action_button dp__action_cancel",
              onClick: c[3] || (c[3] = (b) => L.$emit("select-now")),
              onKeydown: [
                c[4] || (c[4] = withKeys((b) => L.$emit("select-now"), ["enter"])),
                c[5] || (c[5] = withKeys((b) => L.$emit("select-now"), ["space"]))
              ]
            }, toDisplayString(L.nowButtonLabel), 33)) : createCommentVNode("", true),
            unref(a).showSelect ? (openBlock(), createElementBlock("button", {
              key: 2,
              ref_key: "selectButtonRef",
              ref: F,
              type: "button",
              class: "dp__action_button dp__action_select",
              disabled: J.value,
              onKeydown: [
                withKeys(ee, ["enter"]),
                withKeys(ee, ["space"])
              ],
              onClick: ee
            }, toDisplayString(L.selectText), 41, jl)) : createCommentVNode("", true)
          ], 64))
        ], 512)
      ], 64))
    ], 512));
  }
});
var Gl = ["onKeydown"];
var Ql = { class: "dp__selection_grid_header" };
var ql = ["aria-selected", "aria-disabled", "onClick", "onKeydown", "onMouseover"];
var Xl = ["aria-label"];
var Qt = defineComponent({
  __name: "SelectionOverlay",
  props: {
    items: {},
    type: {},
    isLast: { type: Boolean },
    arrowNavigation: { type: Boolean },
    skipButtonRef: { type: Boolean },
    headerRefs: {},
    hideNavigation: {},
    escClose: { type: Boolean },
    useRelative: { type: Boolean },
    height: {},
    textInput: { type: [Boolean, Object] },
    config: {},
    noOverlayFocus: { type: Boolean },
    focusValue: {},
    menuWrapRef: {},
    ariaLabels: {}
  },
  emits: ["selected", "toggle", "reset-flow", "hover-value"],
  setup(e, { expose: t, emit: l }) {
    const { setSelectionGrid: n, buildMultiLevelMatrix: a, setMonthPicker: f } = yt(), r = l, i = e, { defaultedAriaLabels: P, defaultedTextInput: T, defaultedConfig: h2 } = Ce(
      i
    ), { hideNavigationButtons: S } = oa(), M = ref(false), Y = ref(null), I = ref(null), $ = ref([]), F = ref(), C = ref(null), E = ref(0), N = ref(null);
    onBeforeUpdate(() => {
      Y.value = null;
    }), onMounted(() => {
      nextTick().then(() => ae()), i.noOverlayFocus || B(), R(true);
    }), onUnmounted(() => R(false));
    const R = (O) => {
      var p;
      i.arrowNavigation && ((p = i.headerRefs) != null && p.length ? f(O) : n(O));
    }, B = () => {
      var p;
      const O = Ee(I);
      O && (T.value.enabled || (Y.value ? (p = Y.value) == null || p.focus({ preventScroll: true }) : O.focus({ preventScroll: true })), M.value = O.clientHeight < O.scrollHeight);
    }, V = computed(
      () => ({
        dp__overlay: true,
        "dp--overlay-absolute": !i.useRelative,
        "dp--overlay-relative": i.useRelative
      })
    ), J = computed(
      () => i.useRelative ? { height: `${i.height}px`, width: "260px" } : void 0
    ), A = computed(() => ({
      dp__overlay_col: true
    })), ue = computed(
      () => ({
        dp__btn: true,
        dp__button: true,
        dp__overlay_action: true,
        dp__over_action_scroll: M.value,
        dp__button_bottom: i.isLast
      })
    ), le = computed(() => {
      var O, p;
      return {
        dp__overlay_container: true,
        dp__container_flex: ((O = i.items) == null ? void 0 : O.length) <= 6,
        dp__container_block: ((p = i.items) == null ? void 0 : p.length) > 6
      };
    });
    watch(
      () => i.items,
      () => ae(false),
      { deep: true }
    );
    const ae = (O = true) => {
      nextTick().then(() => {
        const p = Ee(Y), j = Ee(I), ne = Ee(C), u = Ee(N), k = ne ? ne.getBoundingClientRect().height : 0;
        j && (j.getBoundingClientRect().height ? E.value = j.getBoundingClientRect().height - k : E.value = h2.value.modeHeight - k), p && u && O && (u.scrollTop = p.offsetTop - u.offsetTop - (E.value / 2 - p.getBoundingClientRect().height) - k);
      });
    }, _ = (O) => {
      O.disabled || r("selected", O.value);
    }, z = () => {
      r("toggle"), r("reset-flow");
    }, ee = () => {
      i.escClose && z();
    }, L = (O, p, j, ne) => {
      O && ((p.active || p.value === i.focusValue) && (Y.value = O), i.arrowNavigation && (Array.isArray($.value[j]) ? $.value[j][ne] = O : $.value[j] = [O], c()));
    }, c = () => {
      var p, j;
      const O = (p = i.headerRefs) != null && p.length ? [i.headerRefs].concat($.value) : $.value.concat([i.skipButtonRef ? [] : [C.value]]);
      a(Ye(O), (j = i.headerRefs) != null && j.length ? "monthPicker" : "selectionGrid");
    }, b = (O) => {
      i.arrowNavigation || mt(O, h2.value, true);
    }, g = (O) => {
      F.value = O, r("hover-value", O);
    }, q = () => {
      if (z(), !i.isLast) {
        const O = rl(i.menuWrapRef ?? null, "action-row");
        if (O) {
          const p = pn(O);
          p == null || p.focus();
        }
      }
    };
    return t({ focusGrid: B }), (O, p) => {
      var j;
      return openBlock(), createElementBlock("div", {
        ref_key: "gridWrapRef",
        ref: I,
        class: normalizeClass(V.value),
        style: normalizeStyle(J.value),
        role: "dialog",
        tabindex: "0",
        onKeydown: [
          withKeys(withModifiers(ee, ["prevent"]), ["esc"]),
          p[0] || (p[0] = withKeys(withModifiers((ne) => b(ne), ["prevent"]), ["left"])),
          p[1] || (p[1] = withKeys(withModifiers((ne) => b(ne), ["prevent"]), ["up"])),
          p[2] || (p[2] = withKeys(withModifiers((ne) => b(ne), ["prevent"]), ["down"])),
          p[3] || (p[3] = withKeys(withModifiers((ne) => b(ne), ["prevent"]), ["right"]))
        ]
      }, [
        createBaseVNode("div", {
          ref_key: "containerRef",
          ref: N,
          class: normalizeClass(le.value),
          role: "grid",
          style: normalizeStyle({ height: `${E.value}px` })
        }, [
          createBaseVNode("div", Ql, [
            renderSlot(O.$slots, "header")
          ]),
          O.$slots.overlay ? renderSlot(O.$slots, "overlay", { key: 0 }) : (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(O.items, (ne, u) => (openBlock(), createElementBlock("div", {
            key: u,
            class: normalizeClass(["dp__overlay_row", { dp__flex_row: O.items.length >= 3 }]),
            role: "row"
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(ne, (k, m) => (openBlock(), createElementBlock("div", {
              key: k.value,
              ref_for: true,
              ref: (X) => L(X, k, u, m),
              role: "gridcell",
              class: normalizeClass(A.value),
              "aria-selected": k.active || void 0,
              "aria-disabled": k.disabled || void 0,
              tabindex: "0",
              onClick: (X) => _(k),
              onKeydown: [
                withKeys(withModifiers((X) => _(k), ["prevent"]), ["enter"]),
                withKeys(withModifiers((X) => _(k), ["prevent"]), ["space"])
              ],
              onMouseover: (X) => g(k.value)
            }, [
              createBaseVNode("div", {
                class: normalizeClass(k.className)
              }, [
                O.$slots.item ? renderSlot(O.$slots, "item", {
                  key: 0,
                  item: k
                }) : createCommentVNode("", true),
                O.$slots.item ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(k.text), 1)
                ], 64))
              ], 2)
            ], 42, ql))), 128))
          ], 2))), 128))
        ], 6),
        O.$slots["button-icon"] ? withDirectives((openBlock(), createElementBlock("button", {
          key: 0,
          ref_key: "toggleButton",
          ref: C,
          type: "button",
          "aria-label": (j = unref(P)) == null ? void 0 : j.toggleOverlay,
          class: normalizeClass(ue.value),
          tabindex: "0",
          onClick: z,
          onKeydown: [
            withKeys(z, ["enter"]),
            withKeys(q, ["tab"])
          ]
        }, [
          renderSlot(O.$slots, "button-icon")
        ], 42, Xl)), [
          [vShow, !unref(S)(O.hideNavigation, O.type)]
        ]) : createCommentVNode("", true)
      ], 46, Gl);
    };
  }
});
var ua = defineComponent({
  __name: "InstanceWrap",
  props: {
    multiCalendars: {},
    stretch: { type: Boolean },
    collapse: { type: Boolean }
  },
  setup(e) {
    const t = e, l = computed(
      () => t.multiCalendars > 0 ? [...Array(t.multiCalendars).keys()] : [0]
    ), n = computed(() => ({
      dp__instance_calendar: t.multiCalendars > 0
    }));
    return (a, f) => (openBlock(), createElementBlock("div", {
      class: normalizeClass({
        dp__menu_inner: !a.stretch,
        "dp--menu--inner-stretched": a.stretch,
        dp__flex_display: a.multiCalendars > 0,
        "dp--flex-display-collapsed": a.collapse
      })
    }, [
      (openBlock(true), createElementBlock(Fragment, null, renderList(l.value, (r, i) => (openBlock(), createElementBlock("div", {
        key: r,
        class: normalizeClass(n.value)
      }, [
        renderSlot(a.$slots, "default", {
          instance: r,
          index: i
        })
      ], 2))), 128))
    ], 2));
  }
});
var Jl = ["aria-label", "aria-disabled"];
var Lt = defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "ArrowBtn",
  props: {
    ariaLabel: {},
    disabled: { type: Boolean }
  },
  emits: ["activate", "set-ref"],
  setup(e, { emit: t }) {
    const l = t, n = ref(null);
    return onMounted(() => l("set-ref", n)), (a, f) => (openBlock(), createElementBlock("button", {
      ref_key: "elRef",
      ref: n,
      type: "button",
      class: "dp__btn dp--arrow-btn-nav",
      tabindex: "0",
      "aria-label": a.ariaLabel,
      "aria-disabled": a.disabled || void 0,
      onClick: f[0] || (f[0] = (r) => a.$emit("activate")),
      onKeydown: [
        f[1] || (f[1] = withKeys(withModifiers((r) => a.$emit("activate"), ["prevent"]), ["enter"])),
        f[2] || (f[2] = withKeys(withModifiers((r) => a.$emit("activate"), ["prevent"]), ["space"]))
      ]
    }, [
      createBaseVNode("span", {
        class: normalizeClass(["dp__inner_nav", { dp__inner_nav_disabled: a.disabled }])
      }, [
        renderSlot(a.$slots, "default")
      ], 2)
    ], 40, Jl));
  }
});
var Zl = { class: "dp--year-mode-picker" };
var xl = ["aria-label"];
var Tn = defineComponent({
  __name: "YearModePicker",
  props: {
    ...at,
    showYearPicker: { type: Boolean, default: false },
    items: { type: Array, default: () => [] },
    instance: { type: Number, default: 0 },
    year: { type: Number, default: 0 },
    isDisabled: { type: Function, default: () => false }
  },
  emits: ["toggle-year-picker", "year-select", "handle-year"],
  setup(e, { emit: t }) {
    const l = t, n = e, { showRightIcon: a, showLeftIcon: f } = oa(), { defaultedConfig: r, defaultedMultiCalendars: i, defaultedAriaLabels: P, defaultedTransitions: T } = Ce(n), { showTransition: h2, transitionName: S } = Kt(T), M = ($ = false, F) => {
      l("toggle-year-picker", { flow: $, show: F });
    }, Y = ($) => {
      l("year-select", $);
    }, I = ($ = false) => {
      l("handle-year", $);
    };
    return ($, F) => {
      var C, E, N;
      return openBlock(), createElementBlock("div", Zl, [
        unref(f)(unref(i), e.instance) ? (openBlock(), createBlock(Lt, {
          key: 0,
          ref: "mpPrevIconRef",
          "aria-label": (C = unref(P)) == null ? void 0 : C.prevYear,
          disabled: e.isDisabled(false),
          onActivate: F[0] || (F[0] = (R) => I(false))
        }, {
          default: withCtx(() => [
            $.$slots["arrow-left"] ? renderSlot($.$slots, "arrow-left", { key: 0 }) : createCommentVNode("", true),
            $.$slots["arrow-left"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Oa), { key: 1 }))
          ]),
          _: 3
        }, 8, ["aria-label", "disabled"])) : createCommentVNode("", true),
        createBaseVNode("button", {
          ref: "mpYearButtonRef",
          class: "dp__btn dp--year-select",
          type: "button",
          "aria-label": (E = unref(P)) == null ? void 0 : E.openYearsOverlay,
          onClick: F[1] || (F[1] = () => M(false)),
          onKeydown: F[2] || (F[2] = withKeys(() => M(false), ["enter"]))
        }, [
          $.$slots.year ? renderSlot($.$slots, "year", {
            key: 0,
            year: e.year
          }) : createCommentVNode("", true),
          $.$slots.year ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
            createTextVNode(toDisplayString(e.year), 1)
          ], 64))
        ], 40, xl),
        unref(a)(unref(i), e.instance) ? (openBlock(), createBlock(Lt, {
          key: 1,
          ref: "mpNextIconRef",
          "aria-label": (N = unref(P)) == null ? void 0 : N.nextYear,
          disabled: e.isDisabled(true),
          onActivate: F[3] || (F[3] = (R) => I(true))
        }, {
          default: withCtx(() => [
            $.$slots["arrow-right"] ? renderSlot($.$slots, "arrow-right", { key: 0 }) : createCommentVNode("", true),
            $.$slots["arrow-right"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Ba), { key: 1 }))
          ]),
          _: 3
        }, 8, ["aria-label", "disabled"])) : createCommentVNode("", true),
        createVNode(Transition, {
          name: unref(S)(e.showYearPicker),
          css: unref(h2)
        }, {
          default: withCtx(() => [
            e.showYearPicker ? (openBlock(), createBlock(Qt, {
              key: 0,
              items: e.items,
              "text-input": $.textInput,
              "esc-close": $.escClose,
              config: $.config,
              "is-last": $.autoApply && !unref(r).keepActionRow,
              "hide-navigation": $.hideNavigation,
              "aria-labels": $.ariaLabels,
              type: "year",
              onToggle: M,
              onSelected: F[4] || (F[4] = (R) => Y(R))
            }, createSlots({
              "button-icon": withCtx(() => [
                $.$slots["calendar-icon"] ? renderSlot($.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true),
                $.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(It), { key: 1 }))
              ]),
              _: 2
            }, [
              $.$slots["year-overlay-value"] ? {
                name: "item",
                fn: withCtx(({ item: R }) => [
                  renderSlot($.$slots, "year-overlay-value", {
                    text: R.text,
                    value: R.value
                  })
                ]),
                key: "0"
              } : void 0
            ]), 1032, ["items", "text-input", "esc-close", "config", "is-last", "hide-navigation", "aria-labels"])) : createCommentVNode("", true)
          ]),
          _: 3
        }, 8, ["name", "css"])
      ]);
    };
  }
});
var Wa = (e, t, l) => {
  if (t.value && Array.isArray(t.value))
    if (t.value.some((n) => ke(e, n))) {
      const n = t.value.filter((a) => !ke(a, e));
      t.value = n.length ? n : null;
    } else
      (l && +l > t.value.length || !l) && t.value.push(e);
  else
    t.value = [e];
};
var Ha = (e, t, l) => {
  let n = e.value ? e.value.slice() : [];
  return n.length === 2 && n[1] !== null && (n = []), n.length ? _e(t, n[0]) ? (n.unshift(t), l("range-start", n[0]), l("range-start", n[1])) : (n[1] = t, l("range-end", t)) : (n = [t], l("range-start", t)), n;
};
var ia = (e, t, l, n) => {
  e && (e[0] && e[1] && l && t("auto-apply"), e[0] && !e[1] && n && l && t("auto-apply"));
};
var Sn = (e) => {
  Array.isArray(e.value) && e.value.length <= 2 && e.range ? e.modelValue.value = e.value.map((t) => it(H(t), e.timezone)) : Array.isArray(e.value) || (e.modelValue.value = it(H(e.value), e.timezone));
};
var Rn = (e, t, l, n) => Array.isArray(t.value) && (t.value.length === 2 || t.value.length === 1 && n.value.partialRange) ? n.value.fixedStart && (Be(e, t.value[0]) || ke(e, t.value[0])) ? [t.value[0], e] : n.value.fixedEnd && (_e(e, t.value[1]) || ke(e, t.value[1])) ? [e, t.value[1]] : (l("invalid-fixed-range", e), t.value) : [];
var Pn = ({
  multiCalendars: e,
  highlight: t,
  propDates: l,
  calendars: n,
  modelValue: a,
  props: f,
  filters: r,
  year: i,
  month: P,
  emit: T
}) => {
  const h2 = computed(() => Ea(f.yearRange, f.locale, f.reverseYears)), S = ref([false]), M = computed(() => (V, J) => {
    const A = set(xe(/* @__PURE__ */ new Date()), {
      month: P.value(V),
      year: i.value(V)
    });
    return wn(
      A,
      l.value.maxDate,
      l.value.minDate,
      f.preventMinMaxNavigation,
      J
    );
  }), Y = () => {
    for (let V = 0; V < e.value.count; V++)
      if (V === 0)
        n.value[V] = n.value[0];
      else {
        const J = set(H(), n.value[V - 1]);
        n.value[V] = { month: getMonth(J), year: getYear(addYears(J, 1)) };
      }
  }, I = (V) => {
    if (!V)
      return Y();
    const J = set(H(), n.value[V]);
    return n.value[0].year = getYear(subYears(J, e.value.count - 1)), Y();
  }, $ = (V) => f.focusStartDate ? V[0] : V[1] ? V[1] : V[0], F = () => {
    if (a.value) {
      const V = Array.isArray(a.value) ? $(a.value) : a.value;
      n.value[0] = { month: getMonth(V), year: getYear(V) };
    }
  };
  onMounted(() => {
    F(), e.value.count && Y();
  });
  const C = (V, J) => {
    n.value[J].year = V, e.value.count && !e.value.solo && I(J);
  }, E = computed(() => (V) => Ot(h2.value, (J) => {
    var ae;
    const A = i.value(V) === J.value, ue = Ut(
      J.value,
      Bt(l.value.minDate),
      Bt(l.value.maxDate)
    ) || ((ae = r.value.years) == null ? void 0 : ae.includes(i.value(V))), le = Va(t.value, J.value);
    return { active: A, disabled: ue, highlighted: le };
  })), N = (V, J) => {
    C(V, J), B(J);
  }, R = (V, J = false) => {
    if (!M.value(V, J)) {
      const A = J ? i.value(V) + 1 : i.value(V) - 1;
      C(A, V);
    }
  }, B = (V, J = false, A) => {
    J || T("reset-flow"), A !== void 0 ? S.value[V] = A : S.value[V] = !S.value[V], S.value || T("overlay-closed");
  };
  return {
    isDisabled: M,
    groupedYears: E,
    showYearPicker: S,
    selectYear: C,
    toggleYearPicker: B,
    handleYearSelect: N,
    handleYear: R
  };
};
var er = (e, t) => {
  const {
    defaultedMultiCalendars: l,
    defaultedAriaLabels: n,
    defaultedTransitions: a,
    defaultedConfig: f,
    defaultedRange: r,
    defaultedHighlight: i,
    propDates: P,
    defaultedTz: T,
    defaultedFilters: h2,
    defaultedMultiDates: S
  } = Ce(e), { modelValue: M, year: Y, month: I, calendars: $ } = Gt(e, t), F = computed(() => vn(e.formatLocale, e.locale, e.monthNameFormat)), C = ref(null), { checkMinMaxRange: E } = ht(e), {
    selectYear: N,
    groupedYears: R,
    showYearPicker: B,
    toggleYearPicker: V,
    handleYearSelect: J,
    handleYear: A,
    isDisabled: ue
  } = Pn({
    modelValue: M,
    multiCalendars: l,
    highlight: i,
    calendars: $,
    year: Y,
    propDates: P,
    month: I,
    filters: h2,
    props: e,
    emit: t
  });
  onMounted(() => {
    e.startDate && (M.value && e.focusStartDate || !M.value) && N(getYear(H(e.startDate)), 0);
  });
  const le = (k) => k ? { month: getMonth(k), year: getYear(k) } : { month: null, year: null }, ae = () => M.value ? Array.isArray(M.value) ? M.value.map((k) => le(k)) : le(M.value) : le(), _ = (k, m) => {
    const X = $.value[k], o = ae();
    return Array.isArray(o) ? o.some((s) => s.year === (X == null ? void 0 : X.year) && s.month === m) : (X == null ? void 0 : X.year) === o.year && m === o.month;
  }, z = (k, m, X) => {
    var s, v;
    const o = ae();
    return Array.isArray(o) ? Y.value(m) === ((s = o[X]) == null ? void 0 : s.year) && k === ((v = o[X]) == null ? void 0 : v.month) : false;
  }, ee = (k, m) => {
    if (r.value.enabled) {
      const X = ae();
      if (Array.isArray(M.value) && Array.isArray(X)) {
        const o = z(k, m, 0) || z(k, m, 1), s = ut(xe(H()), k, Y.value(m));
        return ra(M.value, C.value, s) && !o;
      }
      return false;
    }
    return false;
  }, L = computed(() => (k) => Ot(F.value, (m) => {
    var ie;
    const X = _(k, m.value), o = Ut(
      m.value,
      yn(Y.value(k), P.value.minDate),
      hn(Y.value(k), P.value.maxDate)
    ) || vl(P.value.disabledDates, Y.value(k)).includes(m.value) || ((ie = h2.value.months) == null ? void 0 : ie.includes(m.value)), s = ee(m.value, k), v = Dn(i.value, m.value, Y.value(k));
    return { active: X, disabled: o, isBetween: s, highlighted: v };
  })), c = (k, m) => ut(xe(H()), k, Y.value(m)), b = (k, m) => {
    const X = M.value ? M.value : xe(/* @__PURE__ */ new Date());
    M.value = ut(X, k, Y.value(m)), t("auto-apply"), t("update-flow-step");
  }, g = (k, m) => {
    const X = c(k, m);
    r.value.fixedEnd || r.value.fixedStart ? M.value = Rn(X, M, t, r) : M.value ? E(X, M.value) && (M.value = Ha(M, c(k, m), t)) : M.value = [c(k, m)], nextTick().then(() => {
      ia(M.value, t, e.autoApply, e.modelAuto);
    });
  }, q = (k, m) => {
    Wa(c(k, m), M, S.value.limit), t("auto-apply", true);
  }, O = (k, m) => ($.value[m].month = k, j(m, $.value[m].year, k), S.value.enabled ? q(k, m) : r.value.enabled ? g(k, m) : b(k, m)), p = (k, m) => {
    N(k, m), j(m, k, null);
  }, j = (k, m, X) => {
    let o = X;
    if (!o && o !== 0) {
      const s = ae();
      o = Array.isArray(s) ? s[k].month : s.month;
    }
    t("update-month-year", { instance: k, year: m, month: o });
  };
  return {
    groupedMonths: L,
    groupedYears: R,
    year: Y,
    isDisabled: ue,
    defaultedMultiCalendars: l,
    defaultedAriaLabels: n,
    defaultedTransitions: a,
    defaultedConfig: f,
    showYearPicker: B,
    modelValue: M,
    presetDate: (k, m) => {
      Sn({
        value: k,
        modelValue: M,
        range: r.value.enabled,
        timezone: m ? void 0 : T.value.timezone
      }), t("auto-apply");
    },
    setHoverDate: (k, m) => {
      C.value = c(k, m);
    },
    selectMonth: O,
    selectYear: p,
    toggleYearPicker: V,
    handleYearSelect: J,
    handleYear: A,
    getModelMonthYear: ae
  };
};
var tr = defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "MonthPicker",
  props: {
    ...at
  },
  emits: [
    "update:internal-model-value",
    "overlay-closed",
    "reset-flow",
    "range-start",
    "range-end",
    "auto-apply",
    "update-month-year",
    "update-flow-step",
    "mount",
    "invalid-fixed-range"
  ],
  setup(e, { expose: t, emit: l }) {
    const n = l, a = useSlots(), f = je(a, "yearMode"), r = e;
    onMounted(() => {
      r.shadow || n("mount", null);
    });
    const {
      groupedMonths: i,
      groupedYears: P,
      year: T,
      isDisabled: h2,
      defaultedMultiCalendars: S,
      defaultedConfig: M,
      showYearPicker: Y,
      modelValue: I,
      presetDate: $,
      setHoverDate: F,
      selectMonth: C,
      selectYear: E,
      toggleYearPicker: N,
      handleYearSelect: R,
      handleYear: B,
      getModelMonthYear: V
    } = er(r, n);
    return t({ getSidebarProps: () => ({
      modelValue: I,
      year: T,
      getModelMonthYear: V,
      selectMonth: C,
      selectYear: E,
      handleYear: B
    }), presetDate: $, toggleYearPicker: (A) => N(0, A) }), (A, ue) => (openBlock(), createBlock(ua, {
      "multi-calendars": unref(S).count,
      collapse: A.collapse,
      stretch: ""
    }, {
      default: withCtx(({ instance: le }) => [
        A.$slots["top-extra"] ? renderSlot(A.$slots, "top-extra", {
          key: 0,
          value: A.internalModelValue
        }) : createCommentVNode("", true),
        A.$slots["month-year"] ? renderSlot(A.$slots, "month-year", normalizeProps(mergeProps({ key: 1 }, {
          year: unref(T),
          months: unref(i)(le),
          years: unref(P)(le),
          selectMonth: unref(C),
          selectYear: unref(E),
          instance: le
        }))) : (openBlock(), createBlock(Qt, {
          key: 2,
          items: unref(i)(le),
          "arrow-navigation": A.arrowNavigation,
          "is-last": A.autoApply && !unref(M).keepActionRow,
          "esc-close": A.escClose,
          height: unref(M).modeHeight,
          config: A.config,
          "no-overlay-focus": !!(A.noOverlayFocus || A.textInput),
          "use-relative": "",
          type: "month",
          onSelected: (ae) => unref(C)(ae, le),
          onHoverValue: (ae) => unref(F)(ae, le)
        }, {
          header: withCtx(() => [
            createVNode(Tn, mergeProps(A.$props, {
              items: unref(P)(le),
              instance: le,
              "show-year-picker": unref(Y)[le],
              year: unref(T)(le),
              "is-disabled": (ae) => unref(h2)(le, ae),
              onHandleYear: (ae) => unref(B)(le, ae),
              onYearSelect: (ae) => unref(R)(ae, le),
              onToggleYearPicker: (ae) => unref(N)(le, ae == null ? void 0 : ae.flow, ae == null ? void 0 : ae.show)
            }), createSlots({ _: 2 }, [
              renderList(unref(f), (ae, _) => ({
                name: ae,
                fn: withCtx((z) => [
                  renderSlot(A.$slots, ae, normalizeProps(guardReactiveProps(z)))
                ])
              }))
            ]), 1040, ["items", "instance", "show-year-picker", "year", "is-disabled", "onHandleYear", "onYearSelect", "onToggleYearPicker"])
          ]),
          _: 2
        }, 1032, ["items", "arrow-navigation", "is-last", "esc-close", "height", "config", "no-overlay-focus", "onSelected", "onHoverValue"]))
      ]),
      _: 3
    }, 8, ["multi-calendars", "collapse"]));
  }
});
var ar = (e, t) => {
  const { modelValue: l } = Gt(e, t), n = ref(null), { defaultedHighlight: a, defaultedMultiDates: f, defaultedFilters: r, defaultedRange: i, propDates: P } = Ce(e), T = ref();
  onMounted(() => {
    e.startDate && (l.value && e.focusStartDate || !l.value) && (T.value = getYear(H(e.startDate)));
  });
  const h2 = (F) => Array.isArray(l.value) ? l.value.some((C) => getYear(C) === F) : l.value ? getYear(l.value) === F : false, S = (F) => i.value.enabled && Array.isArray(l.value) ? ra(l.value, n.value, Y(F)) : false, M = computed(() => Ot(Ea(e.yearRange, e.locale, e.reverseYears), (F) => {
    const C = h2(F.value), E = Ut(
      F.value,
      Bt(P.value.minDate),
      Bt(P.value.maxDate)
    ) || r.value.years.includes(F.value), N = S(F.value) && !C, R = Va(a.value, F.value);
    return { active: C, disabled: E, isBetween: N, highlighted: R };
  })), Y = (F) => setYear(xe(/* @__PURE__ */ new Date()), F);
  return {
    groupedYears: M,
    modelValue: l,
    focusYear: T,
    setHoverValue: (F) => {
      n.value = setYear(xe(/* @__PURE__ */ new Date()), F);
    },
    selectYear: (F) => {
      var C;
      if (t("update-month-year", { instance: 0, year: F }), f.value.enabled)
        return l.value ? Array.isArray(l.value) && (((C = l.value) == null ? void 0 : C.map((N) => getYear(N))).includes(F) ? l.value = l.value.filter((N) => getYear(N) !== F) : l.value.push(setYear(Ke(H()), F))) : l.value = [setYear(Ke(H()), F)], t("auto-apply", true);
      i.value.enabled ? (l.value = Ha(l, Y(F), t), nextTick().then(() => {
        ia(l.value, t, e.autoApply, e.modelAuto);
      })) : (l.value = Y(F), t("auto-apply"));
    }
  };
};
var nr = defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "YearPicker",
  props: {
    ...at
  },
  emits: [
    "update:internal-model-value",
    "reset-flow",
    "range-start",
    "range-end",
    "auto-apply",
    "update-month-year"
  ],
  setup(e, { expose: t, emit: l }) {
    const n = l, a = e, { groupedYears: f, modelValue: r, focusYear: i, selectYear: P, setHoverValue: T } = ar(a, n), { defaultedConfig: h2 } = Ce(a);
    return t({ getSidebarProps: () => ({
      modelValue: r,
      selectYear: P
    }) }), (M, Y) => (openBlock(), createElementBlock("div", null, [
      M.$slots["top-extra"] ? renderSlot(M.$slots, "top-extra", {
        key: 0,
        value: M.internalModelValue
      }) : createCommentVNode("", true),
      M.$slots["month-year"] ? renderSlot(M.$slots, "month-year", normalizeProps(mergeProps({ key: 1 }, {
        years: unref(f),
        selectYear: unref(P)
      }))) : (openBlock(), createBlock(Qt, {
        key: 2,
        items: unref(f),
        "is-last": M.autoApply && !unref(h2).keepActionRow,
        height: unref(h2).modeHeight,
        config: M.config,
        "no-overlay-focus": !!(M.noOverlayFocus || M.textInput),
        "focus-value": unref(i),
        type: "year",
        "use-relative": "",
        onSelected: unref(P),
        onHoverValue: unref(T)
      }, createSlots({ _: 2 }, [
        M.$slots["year-overlay-value"] ? {
          name: "item",
          fn: withCtx(({ item: I }) => [
            renderSlot(M.$slots, "year-overlay-value", {
              text: I.text,
              value: I.value
            })
          ]),
          key: "0"
        } : void 0
      ]), 1032, ["items", "is-last", "height", "config", "no-overlay-focus", "focus-value", "onSelected", "onHoverValue"]))
    ]));
  }
});
var lr = {
  key: 0,
  class: "dp__time_input"
};
var rr = ["aria-label", "onKeydown", "onClick"];
var or = createBaseVNode("span", { class: "dp__tp_inline_btn_bar dp__tp_btn_in_l" }, null, -1);
var sr = createBaseVNode("span", { class: "dp__tp_inline_btn_bar dp__tp_btn_in_r" }, null, -1);
var ur = ["aria-label", "disabled", "onKeydown", "onClick"];
var ir = ["aria-label", "onKeydown", "onClick"];
var dr = createBaseVNode("span", { class: "dp__tp_inline_btn_bar dp__tp_btn_in_l" }, null, -1);
var cr = createBaseVNode("span", { class: "dp__tp_inline_btn_bar dp__tp_btn_in_r" }, null, -1);
var fr = { key: 0 };
var vr = ["aria-label", "onKeydown"];
var mr = defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "TimeInput",
  props: {
    hours: { type: Number, default: 0 },
    minutes: { type: Number, default: 0 },
    seconds: { type: Number, default: 0 },
    closeTimePickerBtn: { type: Object, default: null },
    order: { type: Number, default: 0 },
    disabledTimesConfig: { type: Function, default: null },
    validateTime: { type: Function, default: () => false },
    ...at
  },
  emits: [
    "set-hours",
    "set-minutes",
    "update:hours",
    "update:minutes",
    "update:seconds",
    "reset-flow",
    "mounted",
    "overlay-closed",
    "am-pm-change"
  ],
  setup(e, { expose: t, emit: l }) {
    const n = l, a = e, { setTimePickerElements: f, setTimePickerBackRef: r } = yt(), { defaultedAriaLabels: i, defaultedTransitions: P, defaultedFilters: T, defaultedConfig: h2, defaultedRange: S } = Ce(a), { transitionName: M, showTransition: Y } = Kt(P), I = reactive({
      hours: false,
      minutes: false,
      seconds: false
    }), $ = ref("AM"), F = ref(null), C = ref([]);
    onMounted(() => {
      n("mounted");
    });
    const E = (s) => set(/* @__PURE__ */ new Date(), {
      hours: s.hours,
      minutes: s.minutes,
      seconds: a.enableSeconds ? s.seconds : 0,
      milliseconds: 0
    }), N = computed(
      () => (s) => L(s, a[s]) || B(s, a[s])
    ), R = computed(() => ({ hours: a.hours, minutes: a.minutes, seconds: a.seconds })), B = (s, v) => S.value.enabled && !S.value.disableTimeRangeValidation ? !a.validateTime(s, v) : false, V = (s, v) => {
      if (S.value.enabled && !S.value.disableTimeRangeValidation) {
        const ie = v ? +a[`${s}Increment`] : -+a[`${s}Increment`], te = a[s] + ie;
        return !a.validateTime(s, te);
      }
      return false;
    }, J = computed(() => (s) => !q(+a[s] + +a[`${s}Increment`], s) || V(s, true)), A = computed(() => (s) => !q(+a[s] - +a[`${s}Increment`], s) || V(s, false)), ue = (s, v) => add(set(H(), s), v), le = (s, v) => sub(set(H(), s), v), ae = computed(
      () => ({
        dp__time_col: true,
        dp__time_col_block: !a.timePickerInline,
        dp__time_col_reg_block: !a.enableSeconds && a.is24 && !a.timePickerInline,
        dp__time_col_reg_inline: !a.enableSeconds && a.is24 && a.timePickerInline,
        dp__time_col_reg_with_button: !a.enableSeconds && !a.is24,
        dp__time_col_sec: a.enableSeconds && a.is24,
        dp__time_col_sec_with_button: a.enableSeconds && !a.is24
      })
    ), _ = computed(() => {
      const s = [{ type: "hours" }, { type: "", separator: true }, { type: "minutes" }];
      return a.enableSeconds ? s.concat([{ type: "", separator: true }, { type: "seconds" }]) : s;
    }), z = computed(() => _.value.filter((s) => !s.separator)), ee = computed(() => (s) => {
      if (s === "hours") {
        const v = u(+a.hours);
        return { text: v < 10 ? `0${v}` : `${v}`, value: v };
      }
      return { text: a[s] < 10 ? `0${a[s]}` : `${a[s]}`, value: a[s] };
    }), L = (s, v) => {
      var te;
      if (!a.disabledTimesConfig)
        return false;
      const ie = a.disabledTimesConfig(a.order, s === "hours" ? v : void 0);
      return ie[s] ? !!((te = ie[s]) != null && te.includes(v)) : true;
    }, c = (s) => {
      const v = a.is24 ? 24 : 12, ie = s === "hours" ? v : 60, te = +a[`${s}GridIncrement`], he = s === "hours" && !a.is24 ? te : 0, w = [];
      for (let U = he; U < ie; U += te)
        w.push({ value: U, text: U < 10 ? `0${U}` : `${U}` });
      return s === "hours" && !a.is24 && w.push({ value: 0, text: "12" }), Ot(w, (U) => ({ active: false, disabled: T.value.times[s].includes(U.value) || !q(U.value, s) || L(s, U.value) || B(s, U.value) }));
    }, b = (s) => s >= 0 ? s : 59, g = (s) => s >= 0 ? s : 23, q = (s, v) => {
      const ie = a.minTime ? E(ya(a.minTime)) : null, te = a.maxTime ? E(ya(a.maxTime)) : null, he = E(
        ya(
          R.value,
          v,
          v === "minutes" || v === "seconds" ? b(s) : g(s)
        )
      );
      return ie && te ? (isBefore(he, te) || isEqual(he, te)) && (isAfter(he, ie) || isEqual(he, ie)) : ie ? isAfter(he, ie) || isEqual(he, ie) : te ? isBefore(he, te) || isEqual(he, te) : true;
    }, O = (s) => a[`no${s[0].toUpperCase() + s.slice(1)}Overlay`], p = (s) => {
      O(s) || (I[s] = !I[s], I[s] || n("overlay-closed"));
    }, j = (s) => s === "hours" ? getHours : s === "minutes" ? getMinutes : getSeconds, ne = (s, v = true) => {
      const ie = v ? ue : le, te = v ? +a[`${s}Increment`] : -+a[`${s}Increment`];
      q(+a[s] + te, s) && n(
        `update:${s}`,
        j(s)(ie({ [s]: +a[s] }, { [s]: +a[`${s}Increment`] }))
      );
    }, u = (s) => a.is24 ? s : (s >= 12 ? $.value = "PM" : $.value = "AM", el(s)), k = () => {
      $.value === "PM" ? ($.value = "AM", n("update:hours", a.hours - 12)) : ($.value = "PM", n("update:hours", a.hours + 12)), n("am-pm-change", $.value);
    }, m = (s) => {
      I[s] = true;
    }, X = (s, v, ie) => {
      if (s && a.arrowNavigation) {
        Array.isArray(C.value[v]) ? C.value[v][ie] = s : C.value[v] = [s];
        const te = C.value.reduce(
          (he, w) => w.map((U, re) => [...he[re] || [], w[re]]),
          []
        );
        r(a.closeTimePickerBtn), F.value && (te[1] = te[1].concat(F.value)), f(te, a.order);
      }
    }, o = (s, v) => (p(s), s === "hours" && !a.is24 ? n(`update:${s}`, $.value === "PM" ? v + 12 : v) : n(`update:${s}`, v));
    return t({ openChildCmp: m }), (s, v) => {
      var ie;
      return s.disabled ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", lr, [
        (openBlock(true), createElementBlock(Fragment, null, renderList(_.value, (te, he) => {
          var w, U, re;
          return openBlock(), createElementBlock("div", {
            key: he,
            class: normalizeClass(ae.value)
          }, [
            te.separator ? (openBlock(), createElementBlock(Fragment, { key: 0 }, [
              createTextVNode(" : ")
            ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
              createBaseVNode("button", {
                ref_for: true,
                ref: (ge) => X(ge, he, 0),
                type: "button",
                class: normalizeClass({
                  dp__btn: true,
                  dp__inc_dec_button: !s.timePickerInline,
                  dp__inc_dec_button_inline: s.timePickerInline,
                  dp__tp_inline_btn_top: s.timePickerInline,
                  dp__inc_dec_button_disabled: J.value(te.type)
                }),
                "aria-label": (w = unref(i)) == null ? void 0 : w.incrementValue(te.type),
                tabindex: "0",
                onKeydown: [
                  withKeys(withModifiers((ge) => ne(te.type), ["prevent"]), ["enter"]),
                  withKeys(withModifiers((ge) => ne(te.type), ["prevent"]), ["space"])
                ],
                onClick: (ge) => ne(te.type)
              }, [
                a.timePickerInline ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  or,
                  sr
                ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  s.$slots["arrow-up"] ? renderSlot(s.$slots, "arrow-up", { key: 0 }) : createCommentVNode("", true),
                  s.$slots["arrow-up"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Ia), { key: 1 }))
                ], 64))
              ], 42, rr),
              createBaseVNode("button", {
                ref_for: true,
                ref: (ge) => X(ge, he, 1),
                type: "button",
                "aria-label": (U = unref(i)) == null ? void 0 : U.openTpOverlay(te.type),
                class: normalizeClass({
                  dp__time_display: true,
                  dp__time_display_block: !s.timePickerInline,
                  dp__time_display_inline: s.timePickerInline,
                  "dp--time-invalid": N.value(te.type),
                  "dp--time-overlay-btn": !N.value(te.type)
                }),
                disabled: O(te.type),
                tabindex: "0",
                onKeydown: [
                  withKeys(withModifiers((ge) => p(te.type), ["prevent"]), ["enter"]),
                  withKeys(withModifiers((ge) => p(te.type), ["prevent"]), ["space"])
                ],
                onClick: (ge) => p(te.type)
              }, [
                s.$slots[te.type] ? renderSlot(s.$slots, te.type, {
                  key: 0,
                  text: ee.value(te.type).text,
                  value: ee.value(te.type).value
                }) : createCommentVNode("", true),
                s.$slots[te.type] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(ee.value(te.type).text), 1)
                ], 64))
              ], 42, ur),
              createBaseVNode("button", {
                ref_for: true,
                ref: (ge) => X(ge, he, 2),
                type: "button",
                class: normalizeClass({
                  dp__btn: true,
                  dp__inc_dec_button: !s.timePickerInline,
                  dp__inc_dec_button_inline: s.timePickerInline,
                  dp__tp_inline_btn_bottom: s.timePickerInline,
                  dp__inc_dec_button_disabled: A.value(te.type)
                }),
                "aria-label": (re = unref(i)) == null ? void 0 : re.decrementValue(te.type),
                tabindex: "0",
                onKeydown: [
                  withKeys(withModifiers((ge) => ne(te.type, false), ["prevent"]), ["enter"]),
                  withKeys(withModifiers((ge) => ne(te.type, false), ["prevent"]), ["space"])
                ],
                onClick: (ge) => ne(te.type, false)
              }, [
                a.timePickerInline ? (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  dr,
                  cr
                ], 64)) : (openBlock(), createElementBlock(Fragment, { key: 0 }, [
                  s.$slots["arrow-down"] ? renderSlot(s.$slots, "arrow-down", { key: 0 }) : createCommentVNode("", true),
                  s.$slots["arrow-down"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Na), { key: 1 }))
                ], 64))
              ], 42, ir)
            ], 64))
          ], 2);
        }), 128)),
        s.is24 ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", fr, [
          s.$slots["am-pm-button"] ? renderSlot(s.$slots, "am-pm-button", {
            key: 0,
            toggle: k,
            value: $.value
          }) : createCommentVNode("", true),
          s.$slots["am-pm-button"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("button", {
            key: 1,
            ref_key: "amPmButton",
            ref: F,
            type: "button",
            class: "dp__pm_am_button",
            role: "button",
            "aria-label": (ie = unref(i)) == null ? void 0 : ie.amPmButton,
            tabindex: "0",
            onClick: k,
            onKeydown: [
              withKeys(withModifiers(k, ["prevent"]), ["enter"]),
              withKeys(withModifiers(k, ["prevent"]), ["space"])
            ]
          }, toDisplayString($.value), 41, vr))
        ])),
        (openBlock(true), createElementBlock(Fragment, null, renderList(z.value, (te, he) => (openBlock(), createBlock(Transition, {
          key: he,
          name: unref(M)(I[te.type]),
          css: unref(Y)
        }, {
          default: withCtx(() => [
            I[te.type] ? (openBlock(), createBlock(Qt, {
              key: 0,
              items: c(te.type),
              "is-last": s.autoApply && !unref(h2).keepActionRow,
              "esc-close": s.escClose,
              type: te.type,
              "text-input": s.textInput,
              config: s.config,
              "arrow-navigation": s.arrowNavigation,
              "aria-labels": s.ariaLabels,
              onSelected: (w) => o(te.type, w),
              onToggle: (w) => p(te.type),
              onResetFlow: v[0] || (v[0] = (w) => s.$emit("reset-flow"))
            }, createSlots({
              "button-icon": withCtx(() => [
                s.$slots["clock-icon"] ? renderSlot(s.$slots, "clock-icon", { key: 0 }) : createCommentVNode("", true),
                s.$slots["clock-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(resolveDynamicComponent(s.timePickerInline ? unref(It) : unref(Ya)), { key: 1 }))
              ]),
              _: 2
            }, [
              s.$slots[`${te.type}-overlay-value`] ? {
                name: "item",
                fn: withCtx(({ item: w }) => [
                  renderSlot(s.$slots, `${te.type}-overlay-value`, {
                    text: w.text,
                    value: w.value
                  })
                ]),
                key: "0"
              } : void 0
            ]), 1032, ["items", "is-last", "esc-close", "type", "text-input", "config", "arrow-navigation", "aria-labels", "onSelected", "onToggle"])) : createCommentVNode("", true)
          ]),
          _: 2
        }, 1032, ["name", "css"]))), 128))
      ]));
    };
  }
});
var pr = { class: "dp--tp-wrap" };
var gr = ["aria-label", "tabindex"];
var yr = ["tabindex"];
var hr = ["aria-label"];
var Cn = defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "TimePicker",
  props: {
    hours: { type: [Number, Array], default: 0 },
    minutes: { type: [Number, Array], default: 0 },
    seconds: { type: [Number, Array], default: 0 },
    disabledTimesConfig: { type: Function, default: null },
    validateTime: {
      type: Function,
      default: () => false
    },
    ...at
  },
  emits: [
    "update:hours",
    "update:minutes",
    "update:seconds",
    "mount",
    "reset-flow",
    "overlay-opened",
    "overlay-closed",
    "am-pm-change"
  ],
  setup(e, { expose: t, emit: l }) {
    const n = l, a = e, { buildMatrix: f, setTimePicker: r } = yt(), i = useSlots(), { defaultedTransitions: P, defaultedAriaLabels: T, defaultedTextInput: h2, defaultedConfig: S, defaultedRange: M } = Ce(a), { transitionName: Y, showTransition: I } = Kt(P), { hideNavigationButtons: $ } = oa(), F = ref(null), C = ref(null), E = ref([]), N = ref(null);
    onMounted(() => {
      n("mount"), !a.timePicker && a.arrowNavigation ? f([Ee(F.value)], "time") : r(true, a.timePicker);
    });
    const R = computed(() => M.value.enabled && a.modelAuto ? mn(a.internalModelValue) : true), B = ref(false), V = (c) => ({
      hours: Array.isArray(a.hours) ? a.hours[c] : a.hours,
      minutes: Array.isArray(a.minutes) ? a.minutes[c] : a.minutes,
      seconds: Array.isArray(a.seconds) ? a.seconds[c] : a.seconds
    }), J = computed(() => {
      const c = [];
      if (M.value.enabled)
        for (let b = 0; b < 2; b++)
          c.push(V(b));
      else
        c.push(V(0));
      return c;
    }), A = (c, b = false, g = "") => {
      b || n("reset-flow"), B.value = c, n(c ? "overlay-opened" : "overlay-closed"), a.arrowNavigation && r(c), nextTick(() => {
        g !== "" && E.value[0] && E.value[0].openChildCmp(g);
      });
    }, ue = computed(() => ({
      dp__btn: true,
      dp__button: true,
      dp__button_bottom: a.autoApply && !S.value.keepActionRow
    })), le = je(i, "timePicker"), ae = (c, b, g) => M.value.enabled ? b === 0 ? [c, J.value[1][g]] : [J.value[0][g], c] : c, _ = (c) => {
      n("update:hours", c);
    }, z = (c) => {
      n("update:minutes", c);
    }, ee = (c) => {
      n("update:seconds", c);
    }, L = () => {
      if (N.value && !h2.value.enabled && !a.noOverlayFocus) {
        const c = pn(N.value);
        c && c.focus({ preventScroll: true });
      }
    };
    return t({ toggleTimePicker: A }), (c, b) => {
      var g;
      return openBlock(), createElementBlock("div", pr, [
        !c.timePicker && !c.timePickerInline ? withDirectives((openBlock(), createElementBlock("button", {
          key: 0,
          ref_key: "openTimePickerBtn",
          ref: F,
          type: "button",
          class: normalizeClass(ue.value),
          "aria-label": (g = unref(T)) == null ? void 0 : g.openTimePicker,
          tabindex: c.noOverlayFocus ? void 0 : 0,
          onKeydown: [
            b[0] || (b[0] = withKeys((q) => A(true), ["enter"])),
            b[1] || (b[1] = withKeys((q) => A(true), ["space"]))
          ],
          onClick: b[2] || (b[2] = (q) => A(true))
        }, [
          c.$slots["clock-icon"] ? renderSlot(c.$slots, "clock-icon", { key: 0 }) : createCommentVNode("", true),
          c.$slots["clock-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Ya), { key: 1 }))
        ], 42, gr)), [
          [vShow, !unref($)(c.hideNavigation, "time")]
        ]) : createCommentVNode("", true),
        createVNode(Transition, {
          name: unref(Y)(B.value),
          css: unref(I) && !c.timePickerInline
        }, {
          default: withCtx(() => {
            var q;
            return [
              B.value || c.timePicker || c.timePickerInline ? (openBlock(), createElementBlock("div", {
                key: 0,
                ref_key: "overlayRef",
                ref: N,
                class: normalizeClass({
                  dp__overlay: !c.timePickerInline,
                  "dp--overlay-absolute": !a.timePicker && !c.timePickerInline,
                  "dp--overlay-relative": a.timePicker
                }),
                style: normalizeStyle(c.timePicker ? { height: `${unref(S).modeHeight}px` } : void 0),
                tabindex: c.timePickerInline ? void 0 : 0
              }, [
                createBaseVNode("div", {
                  class: normalizeClass(
                    c.timePickerInline ? "dp__time_picker_inline_container" : "dp__overlay_container dp__container_flex dp__time_picker_overlay_container"
                  ),
                  style: { display: "flex" }
                }, [
                  c.$slots["time-picker-overlay"] ? renderSlot(c.$slots, "time-picker-overlay", {
                    key: 0,
                    hours: e.hours,
                    minutes: e.minutes,
                    seconds: e.seconds,
                    setHours: _,
                    setMinutes: z,
                    setSeconds: ee
                  }) : createCommentVNode("", true),
                  c.$slots["time-picker-overlay"] ? createCommentVNode("", true) : (openBlock(), createElementBlock("div", {
                    key: 1,
                    class: normalizeClass(c.timePickerInline ? "dp__flex" : "dp__overlay_row dp__flex_row")
                  }, [
                    (openBlock(true), createElementBlock(Fragment, null, renderList(J.value, (O, p) => withDirectives((openBlock(), createBlock(mr, mergeProps({ key: p }, {
                      ...c.$props,
                      order: p,
                      hours: O.hours,
                      minutes: O.minutes,
                      seconds: O.seconds,
                      closeTimePickerBtn: C.value,
                      disabledTimesConfig: e.disabledTimesConfig,
                      disabled: p === 0 ? c.fixedStart : c.fixedEnd
                    }, {
                      ref_for: true,
                      ref_key: "timeInputRefs",
                      ref: E,
                      "validate-time": (j, ne) => e.validateTime(j, ae(ne, p, j)),
                      "onUpdate:hours": (j) => _(ae(j, p, "hours")),
                      "onUpdate:minutes": (j) => z(ae(j, p, "minutes")),
                      "onUpdate:seconds": (j) => ee(ae(j, p, "seconds")),
                      onMounted: L,
                      onOverlayClosed: L,
                      onAmPmChange: b[3] || (b[3] = (j) => c.$emit("am-pm-change", j))
                    }), createSlots({ _: 2 }, [
                      renderList(unref(le), (j, ne) => ({
                        name: j,
                        fn: withCtx((u) => [
                          renderSlot(c.$slots, j, normalizeProps(guardReactiveProps(u)))
                        ])
                      }))
                    ]), 1040, ["validate-time", "onUpdate:hours", "onUpdate:minutes", "onUpdate:seconds"])), [
                      [vShow, p === 0 ? true : R.value]
                    ])), 128))
                  ], 2)),
                  !c.timePicker && !c.timePickerInline ? withDirectives((openBlock(), createElementBlock("button", {
                    key: 2,
                    ref_key: "closeTimePickerBtn",
                    ref: C,
                    type: "button",
                    class: normalizeClass(ue.value),
                    "aria-label": (q = unref(T)) == null ? void 0 : q.closeTimePicker,
                    tabindex: "0",
                    onKeydown: [
                      b[4] || (b[4] = withKeys((O) => A(false), ["enter"])),
                      b[5] || (b[5] = withKeys((O) => A(false), ["space"]))
                    ],
                    onClick: b[6] || (b[6] = (O) => A(false))
                  }, [
                    c.$slots["calendar-icon"] ? renderSlot(c.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true),
                    c.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(It), { key: 1 }))
                  ], 42, hr)), [
                    [vShow, !unref($)(c.hideNavigation, "time")]
                  ]) : createCommentVNode("", true)
                ], 2)
              ], 14, yr)) : createCommentVNode("", true)
            ];
          }),
          _: 3
        }, 8, ["name", "css"])
      ]);
    };
  }
});
var _n = (e, t, l, n) => {
  const { defaultedRange: a } = Ce(e), f = (N, R) => Array.isArray(t[N]) ? t[N][R] : t[N], r = (N) => e.enableSeconds ? Array.isArray(t.seconds) ? t.seconds[N] : t.seconds : 0, i = (N, R) => N ? R !== void 0 ? pt(N, f("hours", R), f("minutes", R), r(R)) : pt(N, t.hours, t.minutes, r()) : setSeconds(H(), r(R)), P = (N, R) => {
    t[N] = R;
  }, T = computed(() => e.modelAuto && a.value.enabled ? Array.isArray(l.value) ? l.value.length > 1 : false : a.value.enabled), h2 = (N, R) => {
    const B = Object.fromEntries(
      Object.keys(t).map((V) => V === N ? [V, R] : [V, t[V]].slice())
    );
    if (T.value && !a.value.disableTimeRangeValidation) {
      const V = (A) => l.value ? pt(
        l.value[A],
        B.hours[A],
        B.minutes[A],
        B.seconds[A]
      ) : null, J = (A) => setMilliseconds(l.value[A], 0);
      return !(ke(V(0), V(1)) && (isAfter(V(0), J(1)) || isBefore(V(1), J(0))));
    }
    return true;
  }, S = (N, R) => {
    h2(N, R) && (P(N, R), n && n());
  }, M = (N) => {
    S("hours", N);
  }, Y = (N) => {
    S("minutes", N);
  }, I = (N) => {
    S("seconds", N);
  }, $ = (N, R, B, V) => {
    R && M(N), !R && !B && Y(N), B && I(N), l.value && V(l.value);
  }, F = (N) => {
    if (N) {
      const R = Array.isArray(N), B = R ? [+N[0].hours, +N[1].hours] : +N.hours, V = R ? [+N[0].minutes, +N[1].minutes] : +N.minutes, J = R ? [+N[0].seconds, +N[1].seconds] : +N.seconds;
      P("hours", B), P("minutes", V), e.enableSeconds && P("seconds", J);
    }
  }, C = (N, R) => {
    const B = {
      hours: Array.isArray(t.hours) ? t.hours[N] : t.hours,
      disabledArr: []
    };
    return (R || R === 0) && (B.hours = R), Array.isArray(e.disabledTimes) && (B.disabledArr = a.value.enabled && Array.isArray(e.disabledTimes[N]) ? e.disabledTimes[N] : e.disabledTimes), B;
  }, E = computed(() => (N, R) => {
    var B;
    if (Array.isArray(e.disabledTimes)) {
      const { disabledArr: V, hours: J } = C(N, R), A = V.filter((ue) => +ue.hours === J);
      return ((B = A[0]) == null ? void 0 : B.minutes) === "*" ? { hours: [J], minutes: void 0, seconds: void 0 } : {
        hours: [],
        minutes: (A == null ? void 0 : A.map((ue) => +ue.minutes)) ?? [],
        seconds: (A == null ? void 0 : A.map((ue) => ue.seconds ? +ue.seconds : void 0)) ?? []
      };
    }
    return { hours: [], minutes: [], seconds: [] };
  });
  return {
    setTime: P,
    updateHours: M,
    updateMinutes: Y,
    updateSeconds: I,
    getSetDateTime: i,
    updateTimeValues: $,
    getSecondsValue: r,
    assignStartTime: F,
    validateTime: h2,
    disabledTimesConfig: E
  };
};
var br = (e, t) => {
  const { modelValue: l, time: n } = Gt(e, t), { defaultedStartTime: a, defaultedRange: f } = Ce(e), { updateTimeValues: r, getSetDateTime: i, setTime: P, assignStartTime: T, disabledTimesConfig: h2, validateTime: S } = _n(e, n, l), M = (R) => {
    const { hours: B, minutes: V, seconds: J } = R;
    return { hours: +B, minutes: +V, seconds: J ? +J : 0 };
  }, Y = () => {
    if (e.startTime) {
      if (Array.isArray(e.startTime)) {
        const B = M(e.startTime[0]), V = M(e.startTime[1]);
        return [set(H(), B), set(H(), V)];
      }
      const R = M(e.startTime);
      return set(H(), R);
    }
    return f.value.enabled ? [null, null] : null;
  }, I = () => {
    if (f.value.enabled) {
      const [R, B] = Y();
      l.value = [i(R, 0), i(B, 1)];
    } else
      l.value = i(Y());
  }, $ = (R) => Array.isArray(R) ? [$t(H(R[0])), $t(H(R[1]))] : [$t(R ?? H())], F = (R, B, V) => {
    P("hours", R), P("minutes", B), P("seconds", e.enableSeconds ? V : 0);
  }, C = () => {
    const [R, B] = $(l.value);
    return f.value.enabled ? F(
      [R.hours, B.hours],
      [R.minutes, B.minutes],
      [R.seconds, B.seconds]
    ) : F(R.hours, R.minutes, R.seconds);
  };
  onMounted(() => {
    if (!e.shadow)
      return T(a.value), l.value ? C() : I();
  });
  const E = () => {
    Array.isArray(l.value) ? l.value = l.value.map((R, B) => R && i(R, B)) : l.value = i(l.value), t("time-update");
  };
  return {
    modelValue: l,
    time: n,
    disabledTimesConfig: h2,
    updateTime: (R, B = true, V = false) => {
      r(R, B, V, E);
    },
    validateTime: S
  };
};
var kr = defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "TimePickerSolo",
  props: {
    ...at
  },
  emits: ["update:internal-model-value", "time-update", "am-pm-change"],
  setup(e, { expose: t, emit: l }) {
    const n = l, a = e, f = useSlots(), r = je(f, "timePicker"), { time: i, modelValue: P, disabledTimesConfig: T, updateTime: h2, validateTime: S } = br(a, n);
    return t({ getSidebarProps: () => ({
      modelValue: P,
      time: i,
      updateTime: h2
    }) }), (Y, I) => (openBlock(), createBlock(ua, {
      "multi-calendars": 0,
      stretch: ""
    }, {
      default: withCtx(() => [
        createVNode(Cn, mergeProps(Y.$props, {
          hours: unref(i).hours,
          minutes: unref(i).minutes,
          seconds: unref(i).seconds,
          "internal-model-value": Y.internalModelValue,
          "disabled-times-config": unref(T),
          "validate-time": unref(S),
          "onUpdate:hours": I[0] || (I[0] = ($) => unref(h2)($)),
          "onUpdate:minutes": I[1] || (I[1] = ($) => unref(h2)($, false)),
          "onUpdate:seconds": I[2] || (I[2] = ($) => unref(h2)($, false, true)),
          onAmPmChange: I[3] || (I[3] = ($) => Y.$emit("am-pm-change", $))
        }), createSlots({ _: 2 }, [
          renderList(unref(r), ($, F) => ({
            name: $,
            fn: withCtx((C) => [
              renderSlot(Y.$slots, $, normalizeProps(guardReactiveProps(C)))
            ])
          }))
        ]), 1040, ["hours", "minutes", "seconds", "internal-model-value", "disabled-times-config", "validate-time"])
      ]),
      _: 3
    }));
  }
});
var wr = { class: "dp--header-wrap" };
var Mr = {
  key: 0,
  class: "dp__month_year_wrap"
};
var Dr = { key: 0 };
var $r = { class: "dp__month_year_wrap" };
var Ar = ["aria-label", "onClick", "onKeydown"];
var Tr = defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "DpHeader",
  props: {
    month: { type: Number, default: 0 },
    year: { type: Number, default: 0 },
    instance: { type: Number, default: 0 },
    years: { type: Array, default: () => [] },
    months: { type: Array, default: () => [] },
    ...at
  },
  emits: ["update-month-year", "mount", "reset-flow", "overlay-closed"],
  setup(e, { expose: t, emit: l }) {
    const n = l, a = e, {
      defaultedTransitions: f,
      defaultedAriaLabels: r,
      defaultedMultiCalendars: i,
      defaultedFilters: P,
      defaultedConfig: T,
      defaultedHighlight: h2,
      propDates: S
    } = Ce(a), { transitionName: M, showTransition: Y } = Kt(f), { buildMatrix: I } = yt(), { handleMonthYearChange: $, isDisabled: F, updateMonthYear: C } = Yl(a, n), { showLeftIcon: E, showRightIcon: N } = oa(), R = ref(false), B = ref(false), V = ref([null, null, null, null]);
    onMounted(() => {
      n("mount");
    });
    const J = (p) => ({
      get: () => a[p],
      set: (j) => {
        const ne = p === Ze.month ? Ze.year : Ze.month;
        n("update-month-year", { [p]: j, [ne]: a[ne] }), p === Ze.month ? L(true) : c(true);
      }
    }), A = computed(J(Ze.month)), ue = computed(J(Ze.year)), le = computed(() => (p) => ({
      month: a.month,
      year: a.year,
      items: p === Ze.month ? a.months : a.years,
      instance: a.instance,
      updateMonthYear: C,
      toggle: p === Ze.month ? L : c
    })), ae = computed(() => {
      const p = a.months.find((j) => j.value === a.month);
      return p || { text: "", value: 0 };
    }), _ = computed(() => Ot(a.months, (p) => {
      const j = a.month === p.value, ne = Ut(
        p.value,
        yn(a.year, S.value.minDate),
        hn(a.year, S.value.maxDate)
      ) || P.value.months.includes(p.value), u = Dn(h2.value, p.value, a.year);
      return { active: j, disabled: ne, highlighted: u };
    })), z = computed(() => Ot(a.years, (p) => {
      const j = a.year === p.value, ne = Ut(
        p.value,
        Bt(S.value.minDate),
        Bt(S.value.maxDate)
      ) || P.value.years.includes(p.value), u = Va(h2.value, p.value);
      return { active: j, disabled: ne, highlighted: u };
    })), ee = (p, j) => {
      j !== void 0 ? p.value = j : p.value = !p.value, p.value || n("overlay-closed");
    }, L = (p = false, j) => {
      b(p), ee(R, j);
    }, c = (p = false, j) => {
      b(p), ee(B, j);
    }, b = (p) => {
      p || n("reset-flow");
    }, g = (p, j) => {
      a.arrowNavigation && (V.value[j] = Ee(p), I(V.value, "monthYear"));
    }, q = computed(() => {
      var p, j;
      return [
        {
          type: Ze.month,
          index: 1,
          toggle: L,
          modelValue: A.value,
          updateModelValue: (ne) => A.value = ne,
          text: ae.value.text,
          showSelectionGrid: R.value,
          items: _.value,
          ariaLabel: (p = r.value) == null ? void 0 : p.openMonthsOverlay
        },
        {
          type: Ze.year,
          index: 2,
          toggle: c,
          modelValue: ue.value,
          updateModelValue: (ne) => ue.value = ne,
          text: gn(a.year, a.locale),
          showSelectionGrid: B.value,
          items: z.value,
          ariaLabel: (j = r.value) == null ? void 0 : j.openYearsOverlay
        }
      ];
    }), O = computed(() => a.disableYearSelect ? [q.value[0]] : a.yearFirst ? [...q.value].reverse() : q.value);
    return t({
      toggleMonthPicker: L,
      toggleYearPicker: c,
      handleMonthYearChange: $
    }), (p, j) => {
      var ne, u, k;
      return openBlock(), createElementBlock("div", wr, [
        p.$slots["month-year"] ? (openBlock(), createElementBlock("div", Mr, [
          renderSlot(p.$slots, "month-year", normalizeProps(guardReactiveProps({ month: e.month, year: e.year, months: e.months, years: e.years, updateMonthYear: unref(C), handleMonthYearChange: unref($), instance: e.instance })))
        ])) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
          p.$slots["top-extra"] ? (openBlock(), createElementBlock("div", Dr, [
            renderSlot(p.$slots, "top-extra", { value: p.internalModelValue })
          ])) : createCommentVNode("", true),
          createBaseVNode("div", $r, [
            unref(E)(unref(i), e.instance) && !p.vertical ? (openBlock(), createBlock(Lt, {
              key: 0,
              "aria-label": (ne = unref(r)) == null ? void 0 : ne.prevMonth,
              disabled: unref(F)(false),
              onActivate: j[0] || (j[0] = (m) => unref($)(false, true)),
              onSetRef: j[1] || (j[1] = (m) => g(m, 0))
            }, {
              default: withCtx(() => [
                p.$slots["arrow-left"] ? renderSlot(p.$slots, "arrow-left", { key: 0 }) : createCommentVNode("", true),
                p.$slots["arrow-left"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Oa), { key: 1 }))
              ]),
              _: 3
            }, 8, ["aria-label", "disabled"])) : createCommentVNode("", true),
            createBaseVNode("div", {
              class: normalizeClass(["dp__month_year_wrap", {
                dp__year_disable_select: p.disableYearSelect
              }])
            }, [
              (openBlock(true), createElementBlock(Fragment, null, renderList(O.value, (m, X) => (openBlock(), createElementBlock(Fragment, {
                key: m.type
              }, [
                createBaseVNode("button", {
                  ref_for: true,
                  ref: (o) => g(o, X + 1),
                  type: "button",
                  class: "dp__btn dp__month_year_select",
                  tabindex: "0",
                  "aria-label": m.ariaLabel,
                  onClick: m.toggle,
                  onKeydown: [
                    withKeys(withModifiers(m.toggle, ["prevent"]), ["enter"]),
                    withKeys(withModifiers(m.toggle, ["prevent"]), ["space"])
                  ]
                }, [
                  p.$slots[m.type] ? renderSlot(p.$slots, m.type, {
                    key: 0,
                    text: m.text,
                    value: a[m.type]
                  }) : createCommentVNode("", true),
                  p.$slots[m.type] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                    createTextVNode(toDisplayString(m.text), 1)
                  ], 64))
                ], 40, Ar),
                createVNode(Transition, {
                  name: unref(M)(m.showSelectionGrid),
                  css: unref(Y)
                }, {
                  default: withCtx(() => [
                    m.showSelectionGrid ? (openBlock(), createBlock(Qt, {
                      key: 0,
                      items: m.items,
                      "arrow-navigation": p.arrowNavigation,
                      "hide-navigation": p.hideNavigation,
                      "is-last": p.autoApply && !unref(T).keepActionRow,
                      "skip-button-ref": false,
                      config: p.config,
                      type: m.type,
                      "header-refs": [],
                      "esc-close": p.escClose,
                      "menu-wrap-ref": p.menuWrapRef,
                      "text-input": p.textInput,
                      "aria-labels": p.ariaLabels,
                      onSelected: m.updateModelValue,
                      onToggle: m.toggle
                    }, createSlots({
                      "button-icon": withCtx(() => [
                        p.$slots["calendar-icon"] ? renderSlot(p.$slots, "calendar-icon", { key: 0 }) : createCommentVNode("", true),
                        p.$slots["calendar-icon"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(It), { key: 1 }))
                      ]),
                      _: 2
                    }, [
                      p.$slots[`${m.type}-overlay-value`] ? {
                        name: "item",
                        fn: withCtx(({ item: o }) => [
                          renderSlot(p.$slots, `${m.type}-overlay-value`, {
                            text: o.text,
                            value: o.value
                          })
                        ]),
                        key: "0"
                      } : void 0,
                      p.$slots[`${m.type}-overlay`] ? {
                        name: "overlay",
                        fn: withCtx(() => [
                          renderSlot(p.$slots, `${m.type}-overlay`, normalizeProps(guardReactiveProps(le.value(m.type))))
                        ]),
                        key: "1"
                      } : void 0,
                      p.$slots[`${m.type}-overlay-header`] ? {
                        name: "header",
                        fn: withCtx(() => [
                          renderSlot(p.$slots, `${m.type}-overlay-header`, {
                            toggle: m.toggle
                          })
                        ]),
                        key: "2"
                      } : void 0
                    ]), 1032, ["items", "arrow-navigation", "hide-navigation", "is-last", "config", "type", "esc-close", "menu-wrap-ref", "text-input", "aria-labels", "onSelected", "onToggle"])) : createCommentVNode("", true)
                  ]),
                  _: 2
                }, 1032, ["name", "css"])
              ], 64))), 128))
            ], 2),
            unref(E)(unref(i), e.instance) && p.vertical ? (openBlock(), createBlock(Lt, {
              key: 1,
              "aria-label": (u = unref(r)) == null ? void 0 : u.prevMonth,
              disabled: unref(F)(false),
              onActivate: j[2] || (j[2] = (m) => unref($)(false, true))
            }, {
              default: withCtx(() => [
                p.$slots["arrow-up"] ? renderSlot(p.$slots, "arrow-up", { key: 0 }) : createCommentVNode("", true),
                p.$slots["arrow-up"] ? createCommentVNode("", true) : (openBlock(), createBlock(unref(Ia), { key: 1 }))
              ]),
              _: 3
            }, 8, ["aria-label", "disabled"])) : createCommentVNode("", true),
            unref(N)(unref(i), e.instance) ? (openBlock(), createBlock(Lt, {
              key: 2,
              ref: "rightIcon",
              disabled: unref(F)(true),
              "aria-label": (k = unref(r)) == null ? void 0 : k.nextMonth,
              onActivate: j[3] || (j[3] = (m) => unref($)(true, true)),
              onSetRef: j[4] || (j[4] = (m) => g(m, p.disableYearSelect ? 2 : 3))
            }, {
              default: withCtx(() => [
                p.$slots[p.vertical ? "arrow-down" : "arrow-right"] ? renderSlot(p.$slots, p.vertical ? "arrow-down" : "arrow-right", { key: 0 }) : createCommentVNode("", true),
                p.$slots[p.vertical ? "arrow-down" : "arrow-right"] ? createCommentVNode("", true) : (openBlock(), createBlock(resolveDynamicComponent(p.vertical ? unref(Na) : unref(Ba)), { key: 1 }))
              ]),
              _: 3
            }, 8, ["disabled", "aria-label"])) : createCommentVNode("", true)
          ])
        ], 64))
      ]);
    };
  }
});
var Sr = ["aria-label"];
var Rr = {
  class: "dp__calendar_header",
  role: "row"
};
var Pr = {
  key: 0,
  class: "dp__calendar_header_item",
  role: "gridcell"
};
var Cr = ["aria-label"];
var _r = createBaseVNode("div", { class: "dp__calendar_header_separator" }, null, -1);
var Or = ["aria-label"];
var Br = {
  key: 0,
  role: "gridcell",
  class: "dp__calendar_item dp__week_num"
};
var Yr = { class: "dp__cell_inner" };
var Ir = ["id", "aria-selected", "aria-disabled", "aria-label", "onClick", "onKeydown", "onMouseenter", "onMouseleave", "onMousedown"];
var Nr = defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "DpCalendar",
  props: {
    mappedDates: { type: Array, default: () => [] },
    instance: { type: Number, default: 0 },
    month: { type: Number, default: 0 },
    year: { type: Number, default: 0 },
    ...at
  },
  emits: [
    "select-date",
    "set-hover-date",
    "handle-scroll",
    "mount",
    "handle-swipe",
    "handle-space",
    "tooltip-open",
    "tooltip-close"
  ],
  setup(e, { expose: t, emit: l }) {
    const n = l, a = e, { buildMultiLevelMatrix: f } = yt(), {
      defaultedTransitions: r,
      defaultedConfig: i,
      defaultedAriaLabels: P,
      defaultedMultiCalendars: T,
      defaultedWeekNumbers: h2,
      defaultedMultiDates: S
    } = Ce(a), M = ref(null), Y = ref({
      bottom: "",
      left: "",
      transform: ""
    }), I = ref([]), $ = ref(null), F = ref(true), C = ref(""), E = ref({ startX: 0, endX: 0, startY: 0, endY: 0 }), N = ref([]), R = ref({ left: "50%" }), B = ref(false), V = computed(() => a.calendar ? a.calendar(a.mappedDates) : a.mappedDates), J = computed(() => a.dayNames ? Array.isArray(a.dayNames) ? a.dayNames : a.dayNames(a.locale, +a.weekStart) : xn(a.formatLocale, a.locale, +a.weekStart));
    onMounted(() => {
      n("mount", { cmp: "calendar", refs: I }), i.value.noSwipe || $.value && ($.value.addEventListener("touchstart", q, { passive: false }), $.value.addEventListener("touchend", O, { passive: false }), $.value.addEventListener("touchmove", p, { passive: false })), a.monthChangeOnScroll && $.value && $.value.addEventListener("wheel", u, { passive: false });
    });
    const A = (v) => v ? a.vertical ? "vNext" : "next" : a.vertical ? "vPrevious" : "previous", ue = (v, ie) => {
      if (a.transitions) {
        const te = Ke(ut(H(), a.month, a.year));
        C.value = Be(Ke(ut(H(), v, ie)), te) ? r.value[A(true)] : r.value[A(false)], F.value = false, nextTick(() => {
          F.value = true;
        });
      }
    }, le = computed(
      () => ({
        [a.calendarClassName]: !!a.calendarClassName
      })
    ), ae = computed(() => (v) => {
      const ie = tl(v);
      return {
        dp__marker_dot: ie.type === "dot",
        dp__marker_line: ie.type === "line"
      };
    }), _ = computed(() => (v) => ke(v, M.value)), z = computed(() => ({
      dp__calendar: true,
      dp__calendar_next: T.value.count > 0 && a.instance !== 0
    })), ee = computed(() => (v) => a.hideOffsetDates ? v.current : true), L = (v) => format(v, "yyyy-MM-dd"), c = async (v, ie, te) => {
      const he = Ee(I.value[ie][te]);
      if (he) {
        const { width: w, height: U } = he.getBoundingClientRect();
        M.value = v.value;
        let re = { left: `${w / 2}px` }, ge = -50;
        if (await nextTick(), N.value[0]) {
          const { left: Ne, width: oe } = N.value[0].getBoundingClientRect();
          Ne < 0 && (re = { left: "0" }, ge = 0, R.value.left = `${w / 2}px`), window.innerWidth < Ne + oe && (re = { right: "0" }, ge = 0, R.value.left = `${oe - w / 2}px`);
        }
        Y.value = {
          bottom: `${U}px`,
          ...re,
          transform: `translateX(${ge}%)`
        }, n("tooltip-open", v.marker);
      }
    }, b = async (v, ie, te) => {
      var he, w;
      if (B.value && S.value.enabled && S.value.dragSelect)
        return n("select-date", v);
      n("set-hover-date", v), (w = (he = v.marker) == null ? void 0 : he.tooltip) != null && w.length && await c(v, ie, te);
    }, g = (v) => {
      M.value && (M.value = null, Y.value = JSON.parse(JSON.stringify({ bottom: "", left: "", transform: "" })), n("tooltip-close", v.marker));
    }, q = (v) => {
      E.value.startX = v.changedTouches[0].screenX, E.value.startY = v.changedTouches[0].screenY;
    }, O = (v) => {
      E.value.endX = v.changedTouches[0].screenX, E.value.endY = v.changedTouches[0].screenY, j();
    }, p = (v) => {
      a.vertical && !a.inline && v.preventDefault();
    }, j = () => {
      const v = a.vertical ? "Y" : "X";
      Math.abs(E.value[`start${v}`] - E.value[`end${v}`]) > 10 && n("handle-swipe", E.value[`start${v}`] > E.value[`end${v}`] ? "right" : "left");
    }, ne = (v, ie, te) => {
      v && (Array.isArray(I.value[ie]) ? I.value[ie][te] = v : I.value[ie] = [v]), a.arrowNavigation && f(I.value, "calendar");
    }, u = (v) => {
      a.monthChangeOnScroll && (v.preventDefault(), n("handle-scroll", v));
    }, k = (v) => h2.value.type === "local" ? getWeek(v.value, { weekStartsOn: +a.weekStart }) : h2.value.type === "iso" ? getISOWeek(v.value) : typeof h2.value.type == "function" ? h2.value.type(v.value) : "", m = (v) => {
      const ie = v[0];
      return h2.value.hideOnOffsetDates ? v.some((te) => te.current) ? k(ie) : "" : k(ie);
    }, X = (v, ie) => {
      S.value.enabled || (mt(v, i.value), n("select-date", ie));
    }, o = (v) => {
      mt(v, i.value);
    }, s = (v) => {
      S.value.enabled && S.value.dragSelect ? (B.value = true, n("select-date", v)) : S.value.enabled && n("select-date", v);
    };
    return t({ triggerTransition: ue }), (v, ie) => {
      var te;
      return openBlock(), createElementBlock("div", {
        class: normalizeClass(z.value)
      }, [
        createBaseVNode("div", {
          ref_key: "calendarWrapRef",
          ref: $,
          role: "grid",
          class: normalizeClass(le.value),
          "aria-label": (te = unref(P)) == null ? void 0 : te.calendarWrap
        }, [
          createBaseVNode("div", Rr, [
            v.weekNumbers ? (openBlock(), createElementBlock("div", Pr, toDisplayString(v.weekNumName), 1)) : createCommentVNode("", true),
            (openBlock(true), createElementBlock(Fragment, null, renderList(J.value, (he, w) => {
              var U, re;
              return openBlock(), createElementBlock("div", {
                key: w,
                class: "dp__calendar_header_item",
                role: "gridcell",
                "aria-label": (re = (U = unref(P)) == null ? void 0 : U.weekDay) == null ? void 0 : re.call(U, w)
              }, [
                v.$slots["calendar-header"] ? renderSlot(v.$slots, "calendar-header", {
                  key: 0,
                  day: he,
                  index: w
                }) : createCommentVNode("", true),
                v.$slots["calendar-header"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(he), 1)
                ], 64))
              ], 8, Cr);
            }), 128))
          ]),
          _r,
          createVNode(Transition, {
            name: C.value,
            css: !!v.transitions
          }, {
            default: withCtx(() => {
              var he;
              return [
                F.value ? (openBlock(), createElementBlock("div", {
                  key: 0,
                  class: "dp__calendar",
                  role: "rowgroup",
                  "aria-label": ((he = unref(P)) == null ? void 0 : he.calendarDays) || void 0,
                  onMouseleave: ie[1] || (ie[1] = (w) => B.value = false)
                }, [
                  (openBlock(true), createElementBlock(Fragment, null, renderList(V.value, (w, U) => (openBlock(), createElementBlock("div", {
                    key: U,
                    class: "dp__calendar_row",
                    role: "row"
                  }, [
                    v.weekNumbers ? (openBlock(), createElementBlock("div", Br, [
                      createBaseVNode("div", Yr, toDisplayString(m(w.days)), 1)
                    ])) : createCommentVNode("", true),
                    (openBlock(true), createElementBlock(Fragment, null, renderList(w.days, (re, ge) => {
                      var Ne, oe, Ge;
                      return openBlock(), createElementBlock("div", {
                        id: L(re.value),
                        ref_for: true,
                        ref: (Ae) => ne(Ae, U, ge),
                        key: ge + U,
                        role: "gridcell",
                        class: "dp__calendar_item",
                        "aria-selected": (re.classData.dp__active_date || re.classData.dp__range_start || re.classData.dp__range_start) ?? void 0,
                        "aria-disabled": re.classData.dp__cell_disabled || void 0,
                        "aria-label": (oe = (Ne = unref(P)) == null ? void 0 : Ne.day) == null ? void 0 : oe.call(Ne, re),
                        tabindex: "0",
                        onClick: withModifiers((Ae) => X(Ae, re), ["prevent"]),
                        onKeydown: [
                          withKeys((Ae) => v.$emit("select-date", re), ["enter"]),
                          withKeys((Ae) => v.$emit("handle-space", re), ["space"])
                        ],
                        onMouseenter: (Ae) => b(re, U, ge),
                        onMouseleave: (Ae) => g(re),
                        onMousedown: (Ae) => s(re),
                        onMouseup: ie[0] || (ie[0] = (Ae) => B.value = false)
                      }, [
                        createBaseVNode("div", {
                          class: normalizeClass(["dp__cell_inner", re.classData])
                        }, [
                          v.$slots.day && ee.value(re) ? renderSlot(v.$slots, "day", {
                            key: 0,
                            day: +re.text,
                            date: re.value
                          }) : createCommentVNode("", true),
                          v.$slots.day ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                            createTextVNode(toDisplayString(re.text), 1)
                          ], 64)),
                          re.marker && ee.value(re) ? (openBlock(), createElementBlock(Fragment, { key: 2 }, [
                            v.$slots.marker ? renderSlot(v.$slots, "marker", {
                              key: 0,
                              marker: re.marker,
                              day: +re.text,
                              date: re.value
                            }) : (openBlock(), createElementBlock("div", {
                              key: 1,
                              class: normalizeClass(ae.value(re.marker)),
                              style: normalizeStyle(re.marker.color ? { backgroundColor: re.marker.color } : {})
                            }, null, 6))
                          ], 64)) : createCommentVNode("", true),
                          _.value(re.value) ? (openBlock(), createElementBlock("div", {
                            key: 3,
                            ref_for: true,
                            ref_key: "activeTooltip",
                            ref: N,
                            class: "dp__marker_tooltip",
                            style: normalizeStyle(Y.value)
                          }, [
                            (Ge = re.marker) != null && Ge.tooltip ? (openBlock(), createElementBlock("div", {
                              key: 0,
                              class: "dp__tooltip_content",
                              onClick: o
                            }, [
                              (openBlock(true), createElementBlock(Fragment, null, renderList(re.marker.tooltip, (Ae, bt) => (openBlock(), createElementBlock("div", {
                                key: bt,
                                class: "dp__tooltip_text"
                              }, [
                                v.$slots["marker-tooltip"] ? renderSlot(v.$slots, "marker-tooltip", {
                                  key: 0,
                                  tooltip: Ae,
                                  day: re.value
                                }) : createCommentVNode("", true),
                                v.$slots["marker-tooltip"] ? createCommentVNode("", true) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                                  createBaseVNode("div", {
                                    class: "dp__tooltip_mark",
                                    style: normalizeStyle(Ae.color ? { backgroundColor: Ae.color } : {})
                                  }, null, 4),
                                  createBaseVNode("div", null, toDisplayString(Ae.text), 1)
                                ], 64))
                              ]))), 128)),
                              createBaseVNode("div", {
                                class: "dp__arrow_bottom_tp",
                                style: normalizeStyle(R.value)
                              }, null, 4)
                            ])) : createCommentVNode("", true)
                          ], 4)) : createCommentVNode("", true)
                        ], 2)
                      ], 40, Ir);
                    }), 128))
                  ]))), 128))
                ], 40, Or)) : createCommentVNode("", true)
              ];
            }),
            _: 3
          }, 8, ["name", "css"])
        ], 10, Sr)
      ], 2);
    };
  }
});
var an = (e) => Array.isArray(e);
var Er = (e, t, l, n) => {
  const a = ref([]), f = ref(/* @__PURE__ */ new Date()), { modelValue: r, calendars: i, time: P } = Gt(e, t), { defaultedMultiCalendars: T, defaultedStartTime: h2, defaultedRange: S, defaultedTz: M, propDates: Y, defaultedMultiDates: I } = Ce(e), { validateMonthYearInRange: $, isDisabled: F, isDateRangeAllowed: C, checkMinMaxRange: E } = ht(e), { updateTimeValues: N, getSetDateTime: R, setTime: B, assignStartTime: V, validateTime: J, disabledTimesConfig: A } = _n(e, P, r, n), ue = computed(
    () => (y) => i.value[y] ? i.value[y].month : 0
  ), le = computed(
    () => (y) => i.value[y] ? i.value[y].year : 0
  ), ae = (y, Z, de) => {
    var pe, W;
    i.value[y] || (i.value[y] = { month: 0, year: 0 }), i.value[y].month = Ja(Z) ? (pe = i.value[y]) == null ? void 0 : pe.month : Z, i.value[y].year = Ja(de) ? (W = i.value[y]) == null ? void 0 : W.year : de;
  }, _ = () => {
    e.autoApply && t("select-date");
  };
  watch(
    r,
    (y, Z) => {
      JSON.stringify(y) !== JSON.stringify(Z) && L();
    },
    { deep: true }
  ), onMounted(() => {
    e.shadow || (r.value || (m(), h2.value && V(h2.value)), L(true), e.focusStartDate && e.startDate && m());
  });
  const z = computed(() => {
    var y;
    return (y = e.flow) != null && y.length && !e.partialFlow ? e.flowStep === e.flow.length : true;
  }), ee = () => {
    e.autoApply && z.value && t("auto-apply");
  }, L = (y = false) => {
    if (r.value)
      return Array.isArray(r.value) ? (a.value = r.value, j(y)) : g(r.value, y);
    if (T.value.count && y && !e.startDate)
      return b(H(), y);
  }, c = () => Array.isArray(r.value) && S.value.enabled ? getMonth(r.value[0]) === getMonth(r.value[1] ?? r.value[0]) : false, b = (y, Z = false) => {
    if ((!T.value.count || !T.value.static || Z) && ae(0, getMonth(y), getYear(y)), T.value.count && (!T.value.solo || !r.value || c()))
      for (let de = 1; de < T.value.count; de++) {
        const pe = set(H(), { month: ue.value(de - 1), year: le.value(de - 1) }), W = add(pe, { months: 1 });
        i.value[de] = { month: getMonth(W), year: getYear(W) };
      }
  }, g = (y, Z) => {
    b(y), B("hours", getHours(y)), B("minutes", getMinutes(y)), B("seconds", getSeconds(y)), T.value.count && Z && k();
  }, q = (y) => {
    if (T.value.count) {
      if (T.value.solo)
        return 0;
      const Z = getMonth(y[0]), de = getMonth(y[1]);
      return Math.abs(de - Z) < T.value.count ? 0 : 1;
    }
    return 1;
  }, O = (y, Z) => {
    y[1] && S.value.showLastInRange ? b(y[q(y)], Z) : b(y[0], Z);
    const de = (pe, W) => [
      pe(y[0]),
      y[1] ? pe(y[1]) : P[W][1]
    ];
    B("hours", de(getHours, "hours")), B("minutes", de(getMinutes, "minutes")), B("seconds", de(getSeconds, "seconds"));
  }, p = (y, Z) => {
    if ((S.value.enabled || e.weekPicker) && !I.value.enabled)
      return O(y, Z);
    if (I.value.enabled && Z) {
      const de = y[y.length - 1];
      return g(de, Z);
    }
  }, j = (y) => {
    const Z = r.value;
    p(Z, y), T.value.count && T.value.solo && k();
  }, ne = (y, Z) => {
    const de = set(H(), { month: ue.value(Z), year: le.value(Z) }), pe = y < 0 ? addMonths(de, 1) : subMonths(de, 1);
    $(getMonth(pe), getYear(pe), y < 0, e.preventMinMaxNavigation) && (ae(Z, getMonth(pe), getYear(pe)), t("update-month-year", { instance: Z, month: getMonth(pe), year: getYear(pe) }), T.value.count && !T.value.solo && u(Z), l());
  }, u = (y) => {
    for (let Z = y - 1; Z >= 0; Z--) {
      const de = subMonths(set(H(), { month: ue.value(Z + 1), year: le.value(Z + 1) }), 1);
      ae(Z, getMonth(de), getYear(de));
    }
    for (let Z = y + 1; Z <= T.value.count - 1; Z++) {
      const de = addMonths(set(H(), { month: ue.value(Z - 1), year: le.value(Z - 1) }), 1);
      ae(Z, getMonth(de), getYear(de));
    }
  }, k = () => {
    if (Array.isArray(r.value) && r.value.length === 2) {
      const y = H(
        H(r.value[1] ? r.value[1] : addMonths(r.value[0], 1))
      ), [Z, de] = [getMonth(r.value[0]), getYear(r.value[0])], [pe, W] = [getMonth(r.value[1]), getYear(r.value[1])];
      (Z !== pe || Z === pe && de !== W) && T.value.solo && ae(1, getMonth(y), getYear(y));
    } else
      r.value && !Array.isArray(r.value) && (ae(0, getMonth(r.value), getYear(r.value)), b(H()));
  }, m = () => {
    e.startDate && (ae(0, getMonth(H(e.startDate)), getYear(H(e.startDate))), T.value.count && u(0));
  }, X = (y, Z) => {
    if (e.monthChangeOnScroll) {
      const de = (/* @__PURE__ */ new Date()).getTime() - f.value.getTime(), pe = Math.abs(y.deltaY);
      let W = 500;
      pe > 1 && (W = 100), pe > 100 && (W = 0), de > W && (f.value = /* @__PURE__ */ new Date(), ne(e.monthChangeOnScroll !== "inverse" ? -y.deltaY : y.deltaY, Z));
    }
  }, o = (y, Z, de = false) => {
    e.monthChangeOnArrows && e.vertical === de && s(y, Z);
  }, s = (y, Z) => {
    ne(y === "right" ? -1 : 1, Z);
  }, v = (y) => {
    if (Y.value.markers)
      return aa(y.value, Y.value.markers);
  }, ie = (y, Z) => {
    switch (e.sixWeeks === true ? "append" : e.sixWeeks) {
      case "prepend":
        return [true, false];
      case "center":
        return [y == 0, true];
      case "fair":
        return [y == 0 || Z > y, true];
      case "append":
        return [false, false];
      default:
        return [false, false];
    }
  }, te = (y, Z, de, pe) => {
    if (e.sixWeeks && y.length < 6) {
      const W = 6 - y.length, ce = (Z.getDay() + 7 - pe) % 7, ct = 6 - (de.getDay() + 7 - pe) % 7, [Je, Et] = ie(ce, ct);
      for (let kt = 1; kt <= W; kt++)
        if (Et ? !!(kt % 2) == Je : Je) {
          const Xt = y[0].days[0], pa = he(addDays(Xt.value, -7), getMonth(Z));
          y.unshift({ days: pa });
        } else {
          const Xt = y[y.length - 1], pa = Xt.days[Xt.days.length - 1], Bn = he(addDays(pa.value, 1), getMonth(Z));
          y.push({ days: Bn });
        }
    }
    return y;
  }, he = (y, Z) => {
    const de = H(y), pe = [];
    for (let W = 0; W < 7; W++) {
      const ce = addDays(de, W), fe = getMonth(ce) !== Z;
      pe.push({
        text: e.hideOffsetDates && fe ? "" : ce.getDate(),
        value: ce,
        current: !fe,
        classData: {}
      });
    }
    return pe;
  }, w = (y, Z) => {
    const de = [], pe = new Date(Z, y), W = new Date(Z, y + 1, 0), ce = e.weekStart, fe = startOfWeek(pe, { weekStartsOn: ce }), ct = (Je) => {
      const Et = he(Je, y);
      if (de.push({ days: Et }), !de[de.length - 1].days.some(
        (kt) => ke(Ke(kt.value), Ke(W))
      )) {
        const kt = addDays(Je, 7);
        ct(kt);
      }
    };
    return ct(fe), te(de, pe, W, ce);
  }, U = (y) => {
    const Z = pt(H(y.value), P.hours, P.minutes, bt());
    t("date-update", Z), I.value.enabled ? Wa(Z, r, I.value.limit) : r.value = Z, n(), nextTick().then(() => {
      ee();
    });
  }, re = (y) => S.value.noDisabledRange ? bn(a.value[0], y).some((de) => F(de)) : false, ge = () => {
    a.value = r.value ? r.value.slice() : [], a.value.length === 2 && !(S.value.fixedStart || S.value.fixedEnd) && (a.value = []);
  }, Ne = (y, Z) => {
    const de = [
      H(y.value),
      addDays(H(y.value), +S.value.autoRange)
    ];
    C(de) ? (Z && oe(y.value), a.value = de) : t("invalid-date", y.value);
  }, oe = (y) => {
    const Z = getMonth(H(y)), de = getYear(H(y));
    if (ae(0, Z, de), T.value.count > 0)
      for (let pe = 1; pe < T.value.count; pe++) {
        const W = il(
          set(H(y), { year: ue.value(pe - 1), month: le.value(pe - 1) })
        );
        ae(pe, W.month, W.year);
      }
  }, Ge = (y) => {
    if (re(y.value) || !E(y.value, r.value, S.value.fixedStart ? 0 : 1))
      return t("invalid-date", y.value);
    a.value = Rn(H(y.value), r, t, S);
  }, Ae = (y, Z) => {
    if (ge(), S.value.autoRange)
      return Ne(y, Z);
    if (S.value.fixedStart || S.value.fixedEnd)
      return Ge(y);
    a.value[0] ? E(H(y.value), r.value) && !re(y.value) ? _e(H(y.value), H(a.value[0])) ? (a.value.unshift(H(y.value)), t("range-end", a.value[0])) : (a.value[1] = H(y.value), t("range-end", a.value[1])) : (e.autoApply && t("auto-apply-invalid", y.value), t("invalid-date", y.value)) : (a.value[0] = H(y.value), t("range-start", a.value[0]));
  }, bt = (y = true) => e.enableSeconds ? Array.isArray(P.seconds) ? y ? P.seconds[0] : P.seconds[1] : P.seconds : 0, St = (y) => {
    a.value[y] = pt(
      a.value[y],
      P.hours[y],
      P.minutes[y],
      bt(y !== 1)
    );
  }, da = () => {
    var y, Z;
    a.value[0] && a.value[1] && +((y = a.value) == null ? void 0 : y[0]) > +((Z = a.value) == null ? void 0 : Z[1]) && (a.value.reverse(), t("range-start", a.value[0]), t("range-end", a.value[1]));
  }, Nt = () => {
    a.value.length && (a.value[0] && !a.value[1] ? St(0) : (St(0), St(1), n()), da(), r.value = a.value.slice(), ia(a.value, t, e.autoApply, e.modelAuto));
  }, Qe = (y, Z = false) => {
    if (F(y.value) || !y.current && e.hideOffsetDates)
      return t("invalid-date", y.value);
    if (!S.value.enabled)
      return U(y);
    an(P.hours) && an(P.minutes) && !I.value.enabled && (Ae(y, Z), Nt());
  }, ca = (y, Z) => {
    var pe;
    ae(y, Z.month, Z.year), T.value.count && !T.value.solo && u(y), t("update-month-year", { instance: y, month: Z.month, year: Z.year }), l(T.value.solo ? y : void 0);
    const de = (pe = e.flow) != null && pe.length ? e.flow[e.flowStep] : void 0;
    !Z.fromNav && (de === nt.month || de === nt.year) && n();
  }, fa = (y, Z) => {
    Sn({
      value: y,
      modelValue: r,
      range: S.value.enabled,
      timezone: Z ? void 0 : M.value.timezone
    }), _(), e.multiCalendars && nextTick().then(() => L(true));
  }, qt = () => {
    S.value.enabled ? r.value && Array.isArray(r.value) && r.value[0] ? r.value = _e(H(), r.value[0]) ? [H(), r.value[0]] : [r.value[0], H()] : r.value = [H()] : r.value = H(), _();
  }, va = () => {
    if (Array.isArray(r.value))
      if (I.value.enabled) {
        const y = ma();
        r.value[r.value.length - 1] = R(y);
      } else
        r.value = r.value.map((y, Z) => y && R(y, Z));
    else
      r.value = R(r.value);
    t("time-update");
  }, ma = () => Array.isArray(r.value) && r.value.length ? r.value[r.value.length - 1] : null;
  return {
    calendars: i,
    modelValue: r,
    month: ue,
    year: le,
    time: P,
    disabledTimesConfig: A,
    validateTime: J,
    getCalendarDays: w,
    getMarker: v,
    handleScroll: X,
    handleSwipe: s,
    handleArrow: o,
    selectDate: Qe,
    updateMonthYear: ca,
    presetDate: fa,
    selectCurrentDate: qt,
    updateTime: (y, Z = true, de = false) => {
      N(y, Z, de, va);
    }
  };
};
var Fr = { key: 0 };
var Lr = defineComponent({
  __name: "DatePicker",
  props: {
    ...at
  },
  emits: [
    "tooltip-open",
    "tooltip-close",
    "mount",
    "update:internal-model-value",
    "update-flow-step",
    "reset-flow",
    "auto-apply",
    "focus-menu",
    "select-date",
    "range-start",
    "range-end",
    "invalid-fixed-range",
    "time-update",
    "am-pm-change",
    "time-picker-open",
    "time-picker-close",
    "recalculate-position",
    "update-month-year",
    "auto-apply-invalid",
    "date-update",
    "invalid-date"
  ],
  setup(e, { expose: t, emit: l }) {
    const n = l, a = e, {
      calendars: f,
      month: r,
      year: i,
      modelValue: P,
      time: T,
      disabledTimesConfig: h2,
      validateTime: S,
      getCalendarDays: M,
      getMarker: Y,
      handleArrow: I,
      handleScroll: $,
      handleSwipe: F,
      selectDate: C,
      updateMonthYear: E,
      presetDate: N,
      selectCurrentDate: R,
      updateTime: B
    } = Er(a, n, q, O), V = useSlots(), { setHoverDate: J, getDayClassData: A, clearHoverDate: ue } = Fl(P, a), { defaultedMultiCalendars: le } = Ce(a), ae = ref([]), _ = ref([]), z = ref(null), ee = je(V, "calendar"), L = je(V, "monthYear"), c = je(V, "timePicker"), b = (m) => {
      a.shadow || n("mount", m);
    };
    watch(
      f,
      () => {
        a.shadow || setTimeout(() => {
          n("recalculate-position");
        }, 0);
      },
      { deep: true }
    );
    const g = computed(() => (m) => M(r.value(m), i.value(m)).map((X) => ({
      ...X,
      days: X.days.map((o) => (o.marker = Y(o), o.classData = A(o), o))
    })));
    function q(m) {
      var X;
      m || m === 0 ? (X = _.value[m]) == null || X.triggerTransition(r.value(m), i.value(m)) : _.value.forEach((o, s) => o.triggerTransition(r.value(s), i.value(s)));
    }
    function O() {
      n("update-flow-step");
    }
    const p = (m, X = false) => {
      C(m, X), a.spaceConfirm && n("select-date");
    };
    return t({
      clearHoverDate: ue,
      presetDate: N,
      selectCurrentDate: R,
      toggleMonthPicker: (m, X, o = 0) => {
        var s;
        (s = ae.value[o]) == null || s.toggleMonthPicker(m, X);
      },
      toggleYearPicker: (m, X, o = 0) => {
        var s;
        (s = ae.value[o]) == null || s.toggleYearPicker(m, X);
      },
      toggleTimePicker: (m, X, o) => {
        var s;
        (s = z.value) == null || s.toggleTimePicker(m, X, o);
      },
      handleArrow: I,
      updateMonthYear: E,
      getSidebarProps: () => ({
        modelValue: P,
        month: r,
        year: i,
        time: T,
        updateTime: B,
        updateMonthYear: E,
        selectDate: C,
        presetDate: N
      })
    }), (m, X) => (openBlock(), createElementBlock(Fragment, null, [
      createVNode(ua, {
        "multi-calendars": unref(le).count,
        collapse: m.collapse
      }, {
        default: withCtx(({ instance: o, index: s }) => [
          m.disableMonthYearSelect ? createCommentVNode("", true) : (openBlock(), createBlock(Tr, mergeProps({
            key: 0,
            ref: (v) => {
              v && (ae.value[s] = v);
            },
            months: unref(vn)(m.formatLocale, m.locale, m.monthNameFormat),
            years: unref(Ea)(m.yearRange, m.locale, m.reverseYears),
            month: unref(r)(o),
            year: unref(i)(o),
            instance: o
          }, m.$props, {
            onMount: X[0] || (X[0] = (v) => b(unref(At).header)),
            onResetFlow: X[1] || (X[1] = (v) => m.$emit("reset-flow")),
            onUpdateMonthYear: (v) => unref(E)(o, v),
            onOverlayClosed: X[2] || (X[2] = (v) => m.$emit("focus-menu"))
          }), createSlots({ _: 2 }, [
            renderList(unref(L), (v, ie) => ({
              name: v,
              fn: withCtx((te) => [
                renderSlot(m.$slots, v, normalizeProps(guardReactiveProps(te)))
              ])
            }))
          ]), 1040, ["months", "years", "month", "year", "instance", "onUpdateMonthYear"])),
          createVNode(Nr, mergeProps({
            ref: (v) => {
              v && (_.value[s] = v);
            },
            "mapped-dates": g.value(o),
            month: unref(r)(o),
            year: unref(i)(o),
            instance: o
          }, m.$props, {
            onSelectDate: (v) => unref(C)(v, o !== 1),
            onHandleSpace: (v) => p(v, o !== 1),
            onSetHoverDate: X[3] || (X[3] = (v) => unref(J)(v)),
            onHandleScroll: (v) => unref($)(v, o),
            onHandleSwipe: (v) => unref(F)(v, o),
            onMount: X[4] || (X[4] = (v) => b(unref(At).calendar)),
            onResetFlow: X[5] || (X[5] = (v) => m.$emit("reset-flow")),
            onTooltipOpen: X[6] || (X[6] = (v) => m.$emit("tooltip-open", v)),
            onTooltipClose: X[7] || (X[7] = (v) => m.$emit("tooltip-close", v))
          }), createSlots({ _: 2 }, [
            renderList(unref(ee), (v, ie) => ({
              name: v,
              fn: withCtx((te) => [
                renderSlot(m.$slots, v, normalizeProps(guardReactiveProps({ ...te })))
              ])
            }))
          ]), 1040, ["mapped-dates", "month", "year", "instance", "onSelectDate", "onHandleSpace", "onHandleScroll", "onHandleSwipe"])
        ]),
        _: 3
      }, 8, ["multi-calendars", "collapse"]),
      m.enableTimePicker ? (openBlock(), createElementBlock("div", Fr, [
        m.$slots["time-picker"] ? renderSlot(m.$slots, "time-picker", normalizeProps(mergeProps({ key: 0 }, { time: unref(T), updateTime: unref(B) }))) : (openBlock(), createBlock(Cn, mergeProps({
          key: 1,
          ref_key: "timePickerRef",
          ref: z
        }, m.$props, {
          hours: unref(T).hours,
          minutes: unref(T).minutes,
          seconds: unref(T).seconds,
          "internal-model-value": m.internalModelValue,
          "disabled-times-config": unref(h2),
          "validate-time": unref(S),
          onMount: X[8] || (X[8] = (o) => b(unref(At).timePicker)),
          "onUpdate:hours": X[9] || (X[9] = (o) => unref(B)(o)),
          "onUpdate:minutes": X[10] || (X[10] = (o) => unref(B)(o, false)),
          "onUpdate:seconds": X[11] || (X[11] = (o) => unref(B)(o, false, true)),
          onResetFlow: X[12] || (X[12] = (o) => m.$emit("reset-flow")),
          onOverlayClosed: X[13] || (X[13] = (o) => m.$emit("time-picker-close")),
          onOverlayOpened: X[14] || (X[14] = (o) => m.$emit("time-picker-open", o)),
          onAmPmChange: X[15] || (X[15] = (o) => m.$emit("am-pm-change", o))
        }), createSlots({ _: 2 }, [
          renderList(unref(c), (o, s) => ({
            name: o,
            fn: withCtx((v) => [
              renderSlot(m.$slots, o, normalizeProps(guardReactiveProps(v)))
            ])
          }))
        ]), 1040, ["hours", "minutes", "seconds", "internal-model-value", "disabled-times-config", "validate-time"]))
      ])) : createCommentVNode("", true)
    ], 64));
  }
});
var Vr = (e, t) => {
  const l = ref(), {
    defaultedMultiCalendars: n,
    defaultedConfig: a,
    defaultedHighlight: f,
    defaultedRange: r,
    propDates: i,
    defaultedFilters: P,
    defaultedMultiDates: T
  } = Ce(e), { modelValue: h2, year: S, month: M, calendars: Y } = Gt(e, t), { isDisabled: I } = ht(e), { selectYear: $, groupedYears: F, showYearPicker: C, isDisabled: E, toggleYearPicker: N, handleYearSelect: R, handleYear: B } = Pn({
    modelValue: h2,
    multiCalendars: n,
    highlight: f,
    calendars: Y,
    propDates: i,
    month: M,
    year: S,
    filters: P,
    props: e,
    emit: t
  }), V = (b, g) => [b, g].map((q) => format(q, "MMMM", { locale: e.formatLocale })).join("-"), J = computed(() => (b) => h2.value ? Array.isArray(h2.value) ? h2.value.some((g) => isSameQuarter(b, g)) : isSameQuarter(h2.value, b) : false), A = (b) => {
    if (r.value.enabled) {
      if (Array.isArray(h2.value)) {
        const g = ke(b, h2.value[0]) || ke(b, h2.value[1]);
        return ra(h2.value, l.value, b) && !g;
      }
      return false;
    }
    return false;
  }, ue = (b, g) => b.quarter === getQuarter(g) && b.year === getYear(g), le = (b) => typeof f.value == "function" ? f.value({ quarter: getQuarter(b), year: getYear(b) }) : !!f.value.quarters.find((g) => ue(g, b)), ae = computed(() => (b) => {
    const g = set(/* @__PURE__ */ new Date(), { year: S.value(b) });
    return eachQuarterOfInterval({
      start: startOfYear(g),
      end: endOfYear(g)
    }).map((q) => {
      const O = startOfQuarter(q), p = endOfQuarter(q), j = I(q), ne = A(O), u = le(O);
      return {
        text: V(O, p),
        value: O,
        active: J.value(O),
        highlighted: u,
        disabled: j,
        isBetween: ne
      };
    });
  }), _ = (b) => {
    Wa(b, h2, T.value.limit), t("auto-apply", true);
  }, z = (b) => {
    h2.value = Ha(h2, b, t), ia(h2.value, t, e.autoApply, e.modelAuto);
  }, ee = (b) => {
    h2.value = b, t("auto-apply");
  };
  return {
    defaultedConfig: a,
    defaultedMultiCalendars: n,
    groupedYears: F,
    year: S,
    isDisabled: E,
    quarters: ae,
    showYearPicker: C,
    modelValue: h2,
    setHoverDate: (b) => {
      l.value = b;
    },
    selectYear: $,
    selectQuarter: (b, g, q) => {
      if (!q)
        return Y.value[g].month = getMonth(endOfQuarter(b)), T.value.enabled ? _(b) : r.value.enabled ? z(b) : ee(b);
    },
    toggleYearPicker: N,
    handleYearSelect: R,
    handleYear: B
  };
};
var Wr = { class: "dp--quarter-items" };
var Hr = ["disabled", "onClick", "onMouseover"];
var zr = defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "QuarterPicker",
  props: {
    ...at
  },
  emits: [
    "update:internal-model-value",
    "reset-flow",
    "overlay-closed",
    "auto-apply",
    "range-start",
    "range-end"
  ],
  setup(e, { expose: t, emit: l }) {
    const n = l, a = e, f = useSlots(), r = je(f, "yearMode"), {
      defaultedMultiCalendars: i,
      defaultedConfig: P,
      groupedYears: T,
      year: h2,
      isDisabled: S,
      quarters: M,
      modelValue: Y,
      showYearPicker: I,
      setHoverDate: $,
      selectQuarter: F,
      toggleYearPicker: C,
      handleYearSelect: E,
      handleYear: N
    } = Vr(a, n);
    return t({ getSidebarProps: () => ({
      modelValue: Y,
      year: h2,
      selectQuarter: F,
      handleYearSelect: E,
      handleYear: N
    }) }), (B, V) => (openBlock(), createBlock(ua, {
      "multi-calendars": unref(i).count,
      collapse: B.collapse,
      stretch: ""
    }, {
      default: withCtx(({ instance: J }) => [
        createBaseVNode("div", {
          class: "dp-quarter-picker-wrap",
          style: normalizeStyle({ minHeight: `${unref(P).modeHeight}px` })
        }, [
          B.$slots["top-extra"] ? renderSlot(B.$slots, "top-extra", {
            key: 0,
            value: B.internalModelValue
          }) : createCommentVNode("", true),
          createBaseVNode("div", null, [
            createVNode(Tn, mergeProps(B.$props, {
              items: unref(T)(J),
              instance: J,
              "show-year-picker": unref(I)[J],
              year: unref(h2)(J),
              "is-disabled": (A) => unref(S)(J, A),
              onHandleYear: (A) => unref(N)(J, A),
              onYearSelect: (A) => unref(E)(A, J),
              onToggleYearPicker: (A) => unref(C)(J, A == null ? void 0 : A.flow, A == null ? void 0 : A.show)
            }), createSlots({ _: 2 }, [
              renderList(unref(r), (A, ue) => ({
                name: A,
                fn: withCtx((le) => [
                  renderSlot(B.$slots, A, normalizeProps(guardReactiveProps(le)))
                ])
              }))
            ]), 1040, ["items", "instance", "show-year-picker", "year", "is-disabled", "onHandleYear", "onYearSelect", "onToggleYearPicker"])
          ]),
          createBaseVNode("div", Wr, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(unref(M)(J), (A, ue) => (openBlock(), createElementBlock("div", { key: ue }, [
              createBaseVNode("button", {
                type: "button",
                class: normalizeClass(["dp--qr-btn", {
                  "dp--qr-btn-active": A.active,
                  "dp--qr-btn-between": A.isBetween,
                  "dp--qr-btn-disabled": A.disabled,
                  "dp--highlighted": A.highlighted
                }]),
                disabled: A.disabled,
                onClick: (le) => unref(F)(A.value, J, A.disabled),
                onMouseover: (le) => unref($)(A.value)
              }, [
                B.$slots.quarter ? renderSlot(B.$slots, "quarter", {
                  key: 0,
                  value: A.value,
                  text: A.text
                }) : (openBlock(), createElementBlock(Fragment, { key: 1 }, [
                  createTextVNode(toDisplayString(A.text), 1)
                ], 64))
              ], 42, Hr)
            ]))), 128))
          ])
        ], 4)
      ]),
      _: 3
    }, 8, ["multi-calendars", "collapse"]));
  }
});
var Ur = ["id", "aria-label"];
var jr = {
  key: 0,
  class: "dp--menu-load-container"
};
var Kr = createBaseVNode("span", { class: "dp--menu-loader" }, null, -1);
var Gr = [
  Kr
];
var Qr = {
  key: 0,
  class: "dp__sidebar_left"
};
var qr = ["onClick", "onKeydown"];
var Xr = {
  key: 2,
  class: "dp__sidebar_right"
};
var Jr = {
  key: 3,
  class: "dp__action_extra"
};
var nn = defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "DatepickerMenu",
  props: {
    ...sa,
    shadow: { type: Boolean, default: false },
    openOnTop: { type: Boolean, default: false },
    internalModelValue: { type: [Date, Array], default: null },
    noOverlayFocus: { type: Boolean, default: false },
    collapse: { type: Boolean, default: false },
    getInputRect: { type: Function, default: () => ({}) }
  },
  emits: [
    "close-picker",
    "select-date",
    "auto-apply",
    "time-update",
    "flow-step",
    "update-month-year",
    "invalid-select",
    "update:internal-model-value",
    "recalculate-position",
    "invalid-fixed-range",
    "tooltip-open",
    "tooltip-close",
    "time-picker-open",
    "time-picker-close",
    "am-pm-change",
    "range-start",
    "range-end",
    "auto-apply-invalid",
    "date-update",
    "invalid-date"
  ],
  setup(e, { expose: t, emit: l }) {
    const n = l, a = e, f = ref(null), r = computed(() => {
      const { openOnTop: w, ...U } = a;
      return {
        ...U,
        flowStep: A.value,
        collapse: a.collapse,
        noOverlayFocus: a.noOverlayFocus,
        menuWrapRef: f.value
      };
    }), { setMenuFocused: i, setShiftKey: P, control: T } = $n(), h2 = useSlots(), { defaultedTextInput: S, defaultedInline: M, defaultedConfig: Y } = Ce(a), I = ref(null), $ = ref(0), F = ref(null), C = ref(false), E = ref(null);
    onMounted(() => {
      if (!a.shadow) {
        C.value = true, N(), window.addEventListener("resize", N);
        const w = Ee(f);
        if (w && !S.value.enabled && !M.value.enabled && (i(true), ee()), w) {
          const U = (re) => {
            Y.value.allowPreventDefault && re.preventDefault(), mt(re, Y.value, true);
          };
          w.addEventListener("pointerdown", U), w.addEventListener("mousedown", U);
        }
      }
    }), onUnmounted(() => {
      window.removeEventListener("resize", N);
    });
    const N = () => {
      const w = Ee(F);
      w && ($.value = w.getBoundingClientRect().width);
    }, { arrowRight: R, arrowLeft: B, arrowDown: V, arrowUp: J } = yt(), { flowStep: A, updateFlowStep: ue, childMount: le, resetFlow: ae } = Ll(a, n, E), _ = computed(() => a.monthPicker ? tr : a.yearPicker ? nr : a.timePicker ? kr : a.quarterPicker ? zr : Lr), z = computed(() => {
      var re;
      if (Y.value.arrowLeft)
        return Y.value.arrowLeft;
      const w = (re = f.value) == null ? void 0 : re.getBoundingClientRect(), U = a.getInputRect();
      return U.width < $.value && U.left <= ((w == null ? void 0 : w.left) ?? 0) ? `${U.width / 2}px` : "50%";
    }), ee = () => {
      const w = Ee(f);
      w && w.focus({ preventScroll: true });
    }, L = computed(() => {
      var w;
      return ((w = E.value) == null ? void 0 : w.getSidebarProps()) || {};
    }), c = () => {
      a.openOnTop && n("recalculate-position");
    }, b = je(h2, "action"), g = computed(() => a.monthPicker || a.yearPicker ? je(h2, "monthYear") : a.timePicker ? je(h2, "timePicker") : je(h2, "shared")), q = computed(() => a.openOnTop ? "dp__arrow_bottom" : "dp__arrow_top"), O = computed(() => ({
      dp__menu_disabled: a.disabled,
      dp__menu_readonly: a.readonly,
      "dp-menu-loading": a.loading
    })), p = computed(
      () => ({
        dp__menu: true,
        dp__menu_index: !M.value.enabled,
        dp__relative: M.value.enabled,
        [a.menuClassName]: !!a.menuClassName
      })
    ), j = (w) => {
      mt(w, Y.value, true);
    }, ne = () => {
      a.escClose && n("close-picker");
    }, u = (w) => {
      if (a.arrowNavigation) {
        if (w === "up")
          return J();
        if (w === "down")
          return V();
        if (w === "left")
          return B();
        if (w === "right")
          return R();
      } else
        w === "left" || w === "up" ? s("handleArrow", "left", 0, w === "up") : s("handleArrow", "right", 0, w === "down");
    }, k = (w) => {
      P(w.shiftKey), !a.disableMonthYearSelect && w.code === "Tab" && w.target.classList.contains("dp__menu") && T.value.shiftKeyInMenu && (w.preventDefault(), mt(w, Y.value, true), n("close-picker"));
    }, m = () => {
      ee(), n("time-picker-close");
    }, X = (w) => {
      var U, re, ge;
      (U = E.value) == null || U.toggleTimePicker(false, false), (re = E.value) == null || re.toggleMonthPicker(false, false, w), (ge = E.value) == null || ge.toggleYearPicker(false, false, w);
    }, o = (w, U = 0) => {
      var re, ge, Ne;
      return w === "month" ? (re = E.value) == null ? void 0 : re.toggleMonthPicker(false, true, U) : w === "year" ? (ge = E.value) == null ? void 0 : ge.toggleYearPicker(false, true, U) : w === "time" ? (Ne = E.value) == null ? void 0 : Ne.toggleTimePicker(true, false) : X(U);
    }, s = (w, ...U) => {
      var re, ge;
      (re = E.value) != null && re[w] && ((ge = E.value) == null || ge[w](...U));
    }, v = () => {
      s("selectCurrentDate");
    }, ie = (w, U) => {
      s("presetDate", w, U);
    }, te = () => {
      s("clearHoverDate");
    };
    return t({
      updateMonthYear: (w, U) => {
        s("updateMonthYear", w, U);
      },
      switchView: o
    }), (w, U) => {
      var re, ge, Ne;
      return openBlock(), createElementBlock("div", {
        id: w.uid ? `dp-menu-${w.uid}` : void 0,
        ref_key: "dpMenuRef",
        ref: f,
        tabindex: "0",
        role: "dialog",
        "aria-label": (re = w.ariaLabels) == null ? void 0 : re.menu,
        class: normalizeClass(p.value),
        style: normalizeStyle({ "--dp-arrow-left": z.value }),
        onMouseleave: te,
        onClick: j,
        onKeydown: [
          withKeys(ne, ["esc"]),
          U[18] || (U[18] = withKeys(withModifiers((oe) => u("left"), ["prevent"]), ["left"])),
          U[19] || (U[19] = withKeys(withModifiers((oe) => u("up"), ["prevent"]), ["up"])),
          U[20] || (U[20] = withKeys(withModifiers((oe) => u("down"), ["prevent"]), ["down"])),
          U[21] || (U[21] = withKeys(withModifiers((oe) => u("right"), ["prevent"]), ["right"])),
          k
        ]
      }, [
        (w.disabled || w.readonly) && unref(M).enabled || w.loading ? (openBlock(), createElementBlock("div", {
          key: 0,
          class: normalizeClass(O.value)
        }, [
          w.loading ? (openBlock(), createElementBlock("div", jr, Gr)) : createCommentVNode("", true)
        ], 2)) : createCommentVNode("", true),
        !unref(M).enabled && !w.teleportCenter ? (openBlock(), createElementBlock("div", {
          key: 1,
          class: normalizeClass(q.value)
        }, null, 2)) : createCommentVNode("", true),
        createBaseVNode("div", {
          ref_key: "innerMenuRef",
          ref: F,
          class: normalizeClass({
            dp__menu_content_wrapper: ((ge = w.presetDates) == null ? void 0 : ge.length) || !!w.$slots["left-sidebar"] || !!w.$slots["right-sidebar"],
            "dp--menu-content-wrapper-collapsed": e.collapse && (((Ne = w.presetDates) == null ? void 0 : Ne.length) || !!w.$slots["left-sidebar"] || !!w.$slots["right-sidebar"])
          }),
          style: normalizeStyle({ "--dp-menu-width": `${$.value}px` })
        }, [
          w.$slots["left-sidebar"] ? (openBlock(), createElementBlock("div", Qr, [
            renderSlot(w.$slots, "left-sidebar", normalizeProps(guardReactiveProps(L.value)))
          ])) : createCommentVNode("", true),
          w.presetDates.length ? (openBlock(), createElementBlock("div", {
            key: 1,
            class: normalizeClass({ "dp--preset-dates-collapsed": e.collapse, "dp--preset-dates": true })
          }, [
            (openBlock(true), createElementBlock(Fragment, null, renderList(w.presetDates, (oe, Ge) => (openBlock(), createElementBlock(Fragment, { key: Ge }, [
              oe.slot ? renderSlot(w.$slots, oe.slot, {
                key: 0,
                presetDate: ie,
                label: oe.label,
                value: oe.value
              }) : (openBlock(), createElementBlock("button", {
                key: 1,
                type: "button",
                style: normalizeStyle(oe.style || {}),
                class: normalizeClass(["dp__btn dp--preset-range", { "dp--preset-range-collapsed": e.collapse }]),
                onClick: withModifiers((Ae) => ie(oe.value, oe.noTz), ["prevent"]),
                onKeydown: [
                  withKeys(withModifiers((Ae) => ie(oe.value, oe.noTz), ["prevent"]), ["enter"]),
                  withKeys(withModifiers((Ae) => ie(oe.value, oe.noTz), ["prevent"]), ["space"])
                ]
              }, toDisplayString(oe.label), 47, qr))
            ], 64))), 128))
          ], 2)) : createCommentVNode("", true),
          createBaseVNode("div", {
            ref_key: "calendarWrapperRef",
            ref: I,
            class: "dp__instance_calendar",
            role: "document"
          }, [
            (openBlock(), createBlock(resolveDynamicComponent(_.value), mergeProps({
              ref_key: "dynCmpRef",
              ref: E
            }, r.value, {
              "flow-step": unref(A),
              onMount: unref(le),
              onUpdateFlowStep: unref(ue),
              onResetFlow: unref(ae),
              onFocusMenu: ee,
              onSelectDate: U[0] || (U[0] = (oe) => w.$emit("select-date")),
              onDateUpdate: U[1] || (U[1] = (oe) => w.$emit("date-update", oe)),
              onTooltipOpen: U[2] || (U[2] = (oe) => w.$emit("tooltip-open", oe)),
              onTooltipClose: U[3] || (U[3] = (oe) => w.$emit("tooltip-close", oe)),
              onAutoApply: U[4] || (U[4] = (oe) => w.$emit("auto-apply", oe)),
              onRangeStart: U[5] || (U[5] = (oe) => w.$emit("range-start", oe)),
              onRangeEnd: U[6] || (U[6] = (oe) => w.$emit("range-end", oe)),
              onInvalidFixedRange: U[7] || (U[7] = (oe) => w.$emit("invalid-fixed-range", oe)),
              onTimeUpdate: U[8] || (U[8] = (oe) => w.$emit("time-update")),
              onAmPmChange: U[9] || (U[9] = (oe) => w.$emit("am-pm-change", oe)),
              onTimePickerOpen: U[10] || (U[10] = (oe) => w.$emit("time-picker-open", oe)),
              onTimePickerClose: m,
              onRecalculatePosition: c,
              onUpdateMonthYear: U[11] || (U[11] = (oe) => w.$emit("update-month-year", oe)),
              onAutoApplyInvalid: U[12] || (U[12] = (oe) => w.$emit("auto-apply-invalid", oe)),
              onInvalidDate: U[13] || (U[13] = (oe) => w.$emit("invalid-date", oe)),
              "onUpdate:internalModelValue": U[14] || (U[14] = (oe) => w.$emit("update:internal-model-value", oe))
            }), createSlots({ _: 2 }, [
              renderList(g.value, (oe, Ge) => ({
                name: oe,
                fn: withCtx((Ae) => [
                  renderSlot(w.$slots, oe, normalizeProps(guardReactiveProps({ ...Ae })))
                ])
              }))
            ]), 1040, ["flow-step", "onMount", "onUpdateFlowStep", "onResetFlow"]))
          ], 512),
          w.$slots["right-sidebar"] ? (openBlock(), createElementBlock("div", Xr, [
            renderSlot(w.$slots, "right-sidebar", normalizeProps(guardReactiveProps(L.value)))
          ])) : createCommentVNode("", true),
          w.$slots["action-extra"] ? (openBlock(), createElementBlock("div", Jr, [
            w.$slots["action-extra"] ? renderSlot(w.$slots, "action-extra", {
              key: 0,
              selectCurrentDate: v
            }) : createCommentVNode("", true)
          ])) : createCommentVNode("", true)
        ], 6),
        !w.autoApply || unref(Y).keepActionRow ? (openBlock(), createBlock(Kl, mergeProps({
          key: 2,
          "menu-mount": C.value
        }, r.value, {
          "calendar-width": $.value,
          onClosePicker: U[15] || (U[15] = (oe) => w.$emit("close-picker")),
          onSelectDate: U[16] || (U[16] = (oe) => w.$emit("select-date")),
          onInvalidSelect: U[17] || (U[17] = (oe) => w.$emit("invalid-select")),
          onSelectNow: v
        }), createSlots({ _: 2 }, [
          renderList(unref(b), (oe, Ge) => ({
            name: oe,
            fn: withCtx((Ae) => [
              renderSlot(w.$slots, oe, normalizeProps(guardReactiveProps({ ...Ae })))
            ])
          }))
        ]), 1040, ["menu-mount", "calendar-width"])) : createCommentVNode("", true)
      ], 46, Ur);
    };
  }
});
var Zr = typeof window < "u" ? window : void 0;
var Ta = () => {
};
var xr = (e) => getCurrentScope() ? (onScopeDispose(e), true) : false;
var eo = (e, t, l, n) => {
  if (!e)
    return Ta;
  let a = Ta;
  const f = watch(
    () => unref(e),
    (i) => {
      a(), i && (i.addEventListener(t, l, n), a = () => {
        i.removeEventListener(t, l, n), a = Ta;
      });
    },
    { immediate: true, flush: "post" }
  ), r = () => {
    f(), a();
  };
  return xr(r), r;
};
var to = (e, t, l, n = {}) => {
  const { window: a = Zr, event: f = "pointerdown" } = n;
  return a ? eo(a, f, (i) => {
    const P = Ee(e), T = Ee(t);
    !P || !T || P === i.target || i.composedPath().includes(P) || i.composedPath().includes(T) || l(i);
  }, { passive: true }) : void 0;
};
var ao = defineComponent({
  compatConfig: {
    MODE: 3
  },
  __name: "VueDatePicker",
  props: {
    ...sa
  },
  emits: [
    "update:model-value",
    "update:model-timezone-value",
    "text-submit",
    "closed",
    "cleared",
    "open",
    "focus",
    "blur",
    "internal-model-change",
    "recalculate-position",
    "flow-step",
    "update-month-year",
    "invalid-select",
    "invalid-fixed-range",
    "tooltip-open",
    "tooltip-close",
    "time-picker-open",
    "time-picker-close",
    "am-pm-change",
    "range-start",
    "range-end",
    "date-update",
    "invalid-date"
  ],
  setup(e, { expose: t, emit: l }) {
    const n = l, a = e, f = useSlots(), r = ref(false), i = toRef(a, "modelValue"), P = toRef(a, "timezone"), T = ref(null), h2 = ref(null), S = ref(null), M = ref(false), Y = ref(null), I = ref(false), $ = ref(false), F = ref(false), { setMenuFocused: C, setShiftKey: E } = $n(), { clearArrowNav: N } = yt(), { validateDate: R, isValidTime: B } = ht(a), {
      defaultedTransitions: V,
      defaultedTextInput: J,
      defaultedInline: A,
      defaultedConfig: ue,
      defaultedRange: le,
      defaultedMultiDates: ae
    } = Ce(a), { menuTransition: _, showTransition: z } = Kt(V);
    onMounted(() => {
      u(a.modelValue), nextTick().then(() => {
        if (!A.value.enabled) {
          const W = O(Y.value);
          W == null || W.addEventListener("scroll", w), window == null || window.addEventListener("resize", U);
        }
      }), A.value.enabled && (r.value = true), window == null || window.addEventListener("keyup", re), window == null || window.addEventListener("keydown", ge);
    }), onUnmounted(() => {
      if (!A.value.enabled) {
        const W = O(Y.value);
        W == null || W.removeEventListener("scroll", w), window == null || window.removeEventListener("resize", U);
      }
      window == null || window.removeEventListener("keyup", re), window == null || window.removeEventListener("keydown", ge);
    });
    const ee = je(f, "all", a.presetDates), L = je(f, "input");
    watch(
      [i, P],
      () => {
        u(i.value);
      },
      { deep: true }
    );
    const { openOnTop: c, menuStyle: b, xCorrect: g, setMenuPosition: q, getScrollableParent: O, shadowRender: p } = Il({
      menuRef: T,
      menuRefInner: h2,
      inputRef: S,
      pickerWrapperRef: Y,
      inline: A,
      emit: n,
      props: a,
      slots: f
    }), {
      inputValue: j,
      internalModelValue: ne,
      parseExternalModelValue: u,
      emitModelValue: k,
      formatInputValue: m,
      checkBeforeEmit: X
    } = Bl(n, a, M), o = computed(
      () => ({
        dp__main: true,
        dp__theme_dark: a.dark,
        dp__theme_light: !a.dark,
        dp__flex_display: A.value.enabled,
        "dp--flex-display-collapsed": F.value,
        dp__flex_display_with_input: A.value.input
      })
    ), s = computed(() => a.dark ? "dp__theme_dark" : "dp__theme_light"), v = computed(() => a.teleport ? {
      to: typeof a.teleport == "boolean" ? "body" : a.teleport,
      disabled: !a.teleport || A.value.enabled
    } : {}), ie = computed(() => ({ class: "dp__outer_menu_wrap" })), te = computed(() => A.value.enabled && (a.timePicker || a.monthPicker || a.yearPicker || a.quarterPicker)), he = () => {
      var W, ce;
      return (ce = (W = S.value) == null ? void 0 : W.$el) == null ? void 0 : ce.getBoundingClientRect();
    }, w = () => {
      r.value && (ue.value.closeOnScroll ? Qe() : q());
    }, U = () => {
      var ce;
      r.value && q();
      const W = (ce = h2.value) == null ? void 0 : ce.$el.getBoundingClientRect().width;
      F.value = document.body.offsetWidth <= W;
    }, re = (W) => {
      W.key === "Tab" && !A.value.enabled && !a.teleport && ue.value.tabOutClosesMenu && (Y.value.contains(document.activeElement) || Qe()), $.value = W.shiftKey;
    }, ge = (W) => {
      $.value = W.shiftKey;
    }, Ne = () => {
      !a.disabled && !a.readonly && (p(nn, a), q(false), r.value = true, r.value && n("open"), r.value || Nt(), u(a.modelValue));
    }, oe = () => {
      var W;
      j.value = "", Nt(), (W = S.value) == null || W.setParsedDate(null), n("update:model-value", null), n("update:model-timezone-value", null), n("cleared"), ue.value.closeOnClearValue && Qe();
    }, Ge = () => {
      const W = ne.value;
      return !W || !Array.isArray(W) && R(W) ? true : Array.isArray(W) ? ae.value.enabled || W.length === 2 && R(W[0]) && R(W[1]) ? true : le.value.partialRange && !a.timePicker ? R(W[0]) : false : false;
    }, Ae = () => {
      X() && Ge() ? (k(), Qe()) : n("invalid-select", ne.value);
    }, bt = (W) => {
      St(), k(), ue.value.closeOnAutoApply && !W && Qe();
    }, St = () => {
      S.value && J.value.enabled && S.value.setParsedDate(ne.value);
    }, da = (W = false) => {
      a.autoApply && B(ne.value) && Ge() && (le.value.enabled && Array.isArray(ne.value) ? (le.value.partialRange || ne.value.length === 2) && bt(W) : bt(W));
    }, Nt = () => {
      J.value.enabled || (ne.value = null);
    }, Qe = () => {
      A.value.enabled || (r.value && (r.value = false, g.value = false, C(false), E(false), N(), n("closed"), j.value && u(i.value)), Nt(), n("blur"));
    }, ca = (W, ce, fe = false) => {
      if (!W) {
        ne.value = null;
        return;
      }
      const ct = Array.isArray(W) ? !W.some((Et) => !R(Et)) : R(W), Je = B(W);
      ct && Je && (ne.value = W, ce && (I.value = fe, Ae(), n("text-submit")));
    }, fa = () => {
      a.autoApply && B(ne.value) && k(), St();
    }, qt = () => r.value ? Qe() : Ne(), va = (W) => {
      ne.value = W;
    }, ma = () => {
      J.value.enabled && (M.value = true, m()), n("focus");
    }, za = () => {
      if (J.value.enabled && (M.value = false, u(a.modelValue), I.value)) {
        const W = ll(Y.value, $.value);
        W == null || W.focus();
      }
      n("blur");
    }, y = (W) => {
      h2.value && h2.value.updateMonthYear(0, {
        month: Xa(W.month),
        year: Xa(W.year)
      });
    }, Z = (W) => {
      u(W ?? a.modelValue);
    }, de = (W, ce) => {
      var fe;
      (fe = h2.value) == null || fe.switchView(W, ce);
    }, pe = (W) => ue.value.onClickOutside ? ue.value.onClickOutside(W) : Qe();
    return to(T, S, () => pe(Ge)), t({
      closeMenu: Qe,
      selectDate: Ae,
      clearValue: oe,
      openMenu: Ne,
      onScroll: w,
      formatInputValue: m,
      // exposed for testing purposes
      updateInternalModelValue: va,
      // modify internal modelValue
      setMonthYear: y,
      parseModel: Z,
      switchView: de,
      toggleMenu: qt
    }), (W, ce) => (openBlock(), createElementBlock("div", {
      ref_key: "pickerWrapperRef",
      ref: Y,
      class: normalizeClass(o.value),
      "data-datepicker-instance": ""
    }, [
      createVNode(zl, mergeProps({
        ref_key: "inputRef",
        ref: S,
        "input-value": unref(j),
        "onUpdate:inputValue": ce[0] || (ce[0] = (fe) => isRef(j) ? j.value = fe : null),
        "is-menu-open": r.value
      }, W.$props, {
        onClear: oe,
        onOpen: Ne,
        onSetInputDate: ca,
        onSetEmptyDate: unref(k),
        onSelectDate: Ae,
        onToggle: qt,
        onClose: Qe,
        onFocus: ma,
        onBlur: za,
        onRealBlur: ce[1] || (ce[1] = (fe) => M.value = false)
      }), createSlots({ _: 2 }, [
        renderList(unref(L), (fe, ct) => ({
          name: fe,
          fn: withCtx((Je) => [
            renderSlot(W.$slots, fe, normalizeProps(guardReactiveProps(Je)))
          ])
        }))
      ]), 1040, ["input-value", "is-menu-open", "onSetEmptyDate"]),
      (openBlock(), createBlock(resolveDynamicComponent(W.teleport ? Teleport : "div"), normalizeProps(guardReactiveProps(v.value)), {
        default: withCtx(() => [
          createVNode(Transition, {
            name: unref(_)(unref(c)),
            css: unref(z) && !unref(A).enabled
          }, {
            default: withCtx(() => [
              r.value ? (openBlock(), createElementBlock("div", mergeProps({
                key: 0,
                ref_key: "dpWrapMenuRef",
                ref: T
              }, ie.value, {
                class: { "dp--menu-wrapper": !unref(A).enabled },
                style: unref(A).enabled ? void 0 : unref(b)
              }), [
                createVNode(nn, mergeProps({
                  ref_key: "dpMenuRef",
                  ref: h2
                }, W.$props, {
                  "internal-model-value": unref(ne),
                  "onUpdate:internalModelValue": ce[2] || (ce[2] = (fe) => isRef(ne) ? ne.value = fe : null),
                  class: { [s.value]: true, "dp--menu-wrapper": W.teleport },
                  "open-on-top": unref(c),
                  "no-overlay-focus": te.value,
                  collapse: F.value,
                  "get-input-rect": he,
                  onClosePicker: Qe,
                  onSelectDate: Ae,
                  onAutoApply: da,
                  onTimeUpdate: fa,
                  onFlowStep: ce[3] || (ce[3] = (fe) => W.$emit("flow-step", fe)),
                  onUpdateMonthYear: ce[4] || (ce[4] = (fe) => W.$emit("update-month-year", fe)),
                  onInvalidSelect: ce[5] || (ce[5] = (fe) => W.$emit("invalid-select", unref(ne))),
                  onAutoApplyInvalid: ce[6] || (ce[6] = (fe) => W.$emit("invalid-select", fe)),
                  onInvalidFixedRange: ce[7] || (ce[7] = (fe) => W.$emit("invalid-fixed-range", fe)),
                  onRecalculatePosition: unref(q),
                  onTooltipOpen: ce[8] || (ce[8] = (fe) => W.$emit("tooltip-open", fe)),
                  onTooltipClose: ce[9] || (ce[9] = (fe) => W.$emit("tooltip-close", fe)),
                  onTimePickerOpen: ce[10] || (ce[10] = (fe) => W.$emit("time-picker-open", fe)),
                  onTimePickerClose: ce[11] || (ce[11] = (fe) => W.$emit("time-picker-close", fe)),
                  onAmPmChange: ce[12] || (ce[12] = (fe) => W.$emit("am-pm-change", fe)),
                  onRangeStart: ce[13] || (ce[13] = (fe) => W.$emit("range-start", fe)),
                  onRangeEnd: ce[14] || (ce[14] = (fe) => W.$emit("range-end", fe)),
                  onDateUpdate: ce[15] || (ce[15] = (fe) => W.$emit("date-update", fe)),
                  onInvalidDate: ce[16] || (ce[16] = (fe) => W.$emit("invalid-date", fe))
                }), createSlots({ _: 2 }, [
                  renderList(unref(ee), (fe, ct) => ({
                    name: fe,
                    fn: withCtx((Je) => [
                      renderSlot(W.$slots, fe, normalizeProps(guardReactiveProps({ ...Je })))
                    ])
                  }))
                ]), 1040, ["internal-model-value", "class", "open-on-top", "no-overlay-focus", "collapse", "onRecalculatePosition"])
              ], 16)) : createCommentVNode("", true)
            ]),
            _: 3
          }, 8, ["name", "css"])
        ]),
        _: 3
      }, 16))
    ], 2));
  }
});
var On = (() => {
  const e = ao;
  return e.install = (t) => {
    t.component("Vue3DatePicker", e);
  }, e;
})();
var no = Object.freeze(Object.defineProperty({
  __proto__: null,
  default: On
}, Symbol.toStringTag, { value: "Module" }));
Object.entries(no).forEach(([e, t]) => {
  e !== "default" && (On[e] = t);
});
export {
  On as default
};
//# sourceMappingURL=@vuepic_vue-datepicker.js.map
